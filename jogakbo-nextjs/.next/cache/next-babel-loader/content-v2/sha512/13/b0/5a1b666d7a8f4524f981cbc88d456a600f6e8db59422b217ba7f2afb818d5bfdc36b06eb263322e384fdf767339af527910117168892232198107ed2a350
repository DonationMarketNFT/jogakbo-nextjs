{"ast":null,"code":"import _regeneratorRuntime from \"/Users/kimdawoon/jogakbo-nextjs/jogakbo-nextjs/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/kimdawoon/jogakbo-nextjs/jogakbo-nextjs/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport Caver, { AbiItem } from \"caver-js\";\nimport { ACCESS_KEY_ID, CHAIN_ID, JOGAKBO_CONTRACT_ADDRESS, NFT_CONTRACT_ADDRESS, SECRET_ACCRESS_KEY } from \"../constants/constants.cypress\";\nimport JOGAKBOABI from \"../abi/JogakboABI.json\";\nimport NFTABI from \"../abi/NftABI.json\";\nvar option = {\n  headers: [{\n    name: \"Authorization\",\n    value: \"Basic \" + Buffer.from(ACCESS_KEY_ID + \":\" + SECRET_ACCRESS_KEY).toString(\"base64\")\n  }, {\n    name: \"x-chain-id\",\n    value: CHAIN_ID\n  }]\n};\nvar caver = new Caver(new Caver.providers.HttpProvider(\"https://node-api.klaytnapi.com/v1/klaytn\", // \"https://api.baobab.klaytn.net:8651/\",\noption));\nexport var rs = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return caver.klay.sendTransaction({\n              type: \"VALUE_TRANSFER\",\n              from: \"0xc72af0d3c40d5E95e3424b251ceA0cD81e230Dc1\",\n              to: \"0xA52c3f53F087B3445190ADc0B038Bd78D8110eDa\",\n              gas: \"300000\",\n              value: caver.utils.toPeb(\"1\", \"KLAY\")\n            });\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function rs() {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var JogakboContract = new caver.contract(JOGAKBOABI, JOGAKBO_CONTRACT_ADDRESS);\nexport var getRefundState = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    var state;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return JogakboContract.methods.refundState().call();\n\n          case 2:\n            state = _context2.sent;\n            console.log(state);\n            return _context2.abrupt(\"return\", state);\n\n          case 5:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function getRefundState() {\n    return _ref2.apply(this, arguments);\n  };\n}(); // 테스트 완료\n\nexport var getCampaignNumber = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n    var number;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return JogakboContract.methods.CampaignNumber().call();\n\n          case 2:\n            number = _context3.sent;\n            console.log(number);\n            return _context3.abrupt(\"return\", number);\n\n          case 5:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n\n  return function getCampaignNumber() {\n    return _ref3.apply(this, arguments);\n  };\n}();\nexport var campaignList = /*#__PURE__*/function () {\n  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n    var number, lists, i, list;\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.next = 2;\n            return JogakboContract.methods.campaignNumber().call();\n\n          case 2:\n            number = _context4.sent;\n            lists = [];\n            i = 0;\n\n          case 5:\n            if (!(i < number)) {\n              _context4.next = 13;\n              break;\n            }\n\n            _context4.next = 8;\n            return JogakboContract.methods.campaignList([i]).call();\n\n          case 8:\n            list = _context4.sent;\n            lists.push(list);\n\n          case 10:\n            i++;\n            _context4.next = 5;\n            break;\n\n          case 13:\n            return _context4.abrupt(\"return\", lists);\n\n          case 14:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n\n  return function campaignList() {\n    return _ref4.apply(this, arguments);\n  };\n}(); // export const testOwnTokenId = async address => {\n//   const ids = await JogakboContract.methods.tokenIds(address).call();\n//   return ids;\n// };\n// export const testTokenId2Description = async id => {\n//   const des = await JogakboContract.methods.tokenDescription(id).call();\n//   return des;\n// };\n// export const testTokenId2Name = async id => {\n//   const des = await JogakboContract.methods.tokenName(id).call();\n//   return des;\n// };\n// export const testCampaignList = async () => {\n//   const Number = await JogakboContract.methods.CampaignNumber().call();\n//   const lists = [];\n//   for (let i = 0; i < Number; i++) {\n//     const list = await JogakboContract.methods.campaignList([i]).call();\n//     lists.push(list);\n//   }\n//   return lists;\n// };\n// export const testCampaignNumber = async () => {\n//   const Number = await JogakboContract.methods.CampaignNumber().call();\n//   console.log(`number:${Number}`);\n//   return Number;\n// };\n// klip 잔고 조회시 메인넷 chain_id 필요\n\nexport var getBalance = function getBalance(address) {\n  return caver.rpc.klay.getBalance(address).then(function (response) {\n    var balance = caver.utils.convertFromPeb(caver.utils.hexToNumberString(response), \"KLAY\");\n    return balance;\n  });\n};\nexport var fromKlaytoPeb = function fromKlaytoPeb(n) {\n  return caver.utils.convertToPeb(n);\n};","map":null,"metadata":{},"sourceType":"module"}