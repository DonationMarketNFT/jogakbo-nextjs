{"ast":null,"code":"import _regeneratorRuntime from \"/Users/kimdawoon/jogakbo-nextjs/jogakbo-nextjs/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/kimdawoon/jogakbo-nextjs/jogakbo-nextjs/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport Caver from \"caver-js\";\nimport { getAccount, postAccount } from \"./accountWc\";\nexport var kaikas = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var provider, accounts;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (typeof window.klaytn !== \"undefined\") {\n              provider = window[\"klaytn\"]; // Kaikas user detected. You can now use the provider.\n            }\n\n            _context.prev = 1;\n            _context.next = 4;\n            return window.klaytn.enable();\n\n          case 4:\n            accounts = _context.sent;\n            postAccount(accounts[0], \"kaikas\");\n            return _context.abrupt(\"return\", null);\n\n          case 9:\n            _context.prev = 9;\n            _context.t0 = _context[\"catch\"](1);\n            console.error(_context.t0);\n\n          case 12:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[1, 9]]);\n  }));\n\n  return function kaikas() {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var testKaikas = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function testKaikas() {\n    return _ref2.apply(this, arguments);\n  };\n}(); // useEffect(() => {\n//   console.log(1);\n//   window.klaytn.on(\"accountsChanged\", function (accounts) {\n//     // kaikas에서 계정을 변경할 때 마다 내부의 함수가 실행됩니다.\n//     console.log(accounts[0]);\n//   });\n// }, [accounts]);\n// export const CheckUnlocked = async () => {\n//   // 지갑이 연결되어있다면 true, 아니라면 false를 리턴합니다.\n//   console.log(await window.klaytn._kaikas.isUnlocked());\n// };","map":{"version":3,"sources":["/Users/kimdawoon/jogakbo-nextjs/jogakbo-nextjs/src/api/useKaikas.js"],"names":["Caver","getAccount","postAccount","kaikas","window","klaytn","provider","enable","accounts","console","error","testKaikas"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,UAAlB;AACA,SAAQC,UAAR,EAAoBC,WAApB,QAAsC,aAAtC;AAEA,OAAO,IAAMC,MAAM;AAAA,sEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AACpB,gBAAI,OAAOC,MAAM,CAACC,MAAd,KAAyB,WAA7B,EAA0C;AAClCC,cAAAA,QADkC,GACvBF,MAAM,CAAC,QAAD,CADiB,EAExC;AACD;;AAJmB;AAAA;AAAA,mBAMKA,MAAM,CAACC,MAAP,CAAcE,MAAd,EANL;;AAAA;AAMZC,YAAAA,QANY;AAOlBN,YAAAA,WAAW,CAACM,QAAQ,CAAC,CAAD,CAAT,EAAc,QAAd,CAAX;AAPkB,6CAQX,IARW;;AAAA;AAAA;AAAA;AAUlBC,YAAAA,OAAO,CAACC,KAAR;;AAVkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAANP,MAAM;AAAA;AAAA;AAAA,GAAZ;AAcP,OAAO,IAAMQ,UAAU;AAAA,uEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAVA,UAAU;AAAA;AAAA;AAAA,GAAhB,C,CAEP;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA","sourcesContent":["import Caver from \"caver-js\";\nimport {getAccount, postAccount} from \"./accountWc\";\n\nexport const kaikas = async () => {\n  if (typeof window.klaytn !== \"undefined\") {\n    const provider = window[\"klaytn\"];\n    // Kaikas user detected. You can now use the provider.\n  }\n  try {\n    const accounts = await window.klaytn.enable();\n    postAccount(accounts[0], \"kaikas\");\n    return null;\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nexport const testKaikas = async () => {};\n\n// useEffect(() => {\n//   console.log(1);\n//   window.klaytn.on(\"accountsChanged\", function (accounts) {\n//     // kaikas에서 계정을 변경할 때 마다 내부의 함수가 실행됩니다.\n\n//     console.log(accounts[0]);\n//   });\n// }, [accounts]);\n\n// export const CheckUnlocked = async () => {\n//   // 지갑이 연결되어있다면 true, 아니라면 false를 리턴합니다.\n//   console.log(await window.klaytn._kaikas.isUnlocked());\n// };\n"]},"metadata":{},"sourceType":"module"}