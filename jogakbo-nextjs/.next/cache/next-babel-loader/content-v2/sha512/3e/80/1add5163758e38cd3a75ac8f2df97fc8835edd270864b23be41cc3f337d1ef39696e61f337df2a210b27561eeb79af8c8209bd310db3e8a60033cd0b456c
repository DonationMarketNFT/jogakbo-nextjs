{"ast":null,"code":"import Caver from \"caver-js\";\nimport { ACCESS_KEY_ID, CHAIN_ID, DONATION_CONTRACT_ADDRESS, SECRET_ACCRESS_KEY } from \"../constants/constants.cypress\";\nimport DONATIONABI from \"../abi/DonationABI.json\";\nconst option = {\n  headers: [{\n    name: \"Authorization\",\n    value: \"Basic \" + Buffer.from(ACCESS_KEY_ID + \":\" + SECRET_ACCRESS_KEY).toString(\"base64\")\n  }, {\n    name: \"x-chain-id\",\n    value: CHAIN_ID\n  }]\n};\nconst caver = new Caver(new Caver.providers.HttpProvider(\"https://node-api.klaytnapi.com/v1/klaytn\", // \"https://api.baobab.klaytn.net:8651/\",\noption));\nconst DonationContract = new caver.contract(DONATIONABI, DONATION_CONTRACT_ADDRESS);\nexport const testOwnTokenId = async address => {\n  const ids = await DonationContract.methods.tokenIds(address).call();\n  return ids;\n};\nexport const testTokenId2Description = async id => {\n  const des = await DonationContract.methods.tokenDescription(id).call();\n  return des;\n};\nexport const testTokenId2Name = async id => {\n  const des = await DonationContract.methods.tokenName(id).call();\n  return des;\n};\nexport const testCampaignList = async () => {\n  const Number = await DonationContract.methods.CampaignNumber().call();\n  const lists = [];\n\n  for (let i = 0; i < Number; i++) {\n    const list = await DonationContract.methods.campaignList([i]).call();\n    lists.push(list);\n  }\n\n  return lists;\n};\nexport const testCampaignNumber = async () => {\n  const Number = await DonationContract.methods.CampaignNumber().call();\n  console.log(`number:${Number}`);\n  return Number;\n}; // klip 잔고 조회시 메인넷 chain_id 필요\n\nexport const getBalance = address => {\n  return caver.rpc.klay.getBalance(address).then(response => {\n    const balance = caver.utils.convertFromPeb(caver.utils.hexToNumberString(response), \"KLAY\");\n    return balance;\n  });\n};","map":{"version":3,"sources":["/Users/kimdawoon/jogakbo-nextjs/jogakbo-nextjs/src/api/UseCaver.ts"],"names":["Caver","ACCESS_KEY_ID","CHAIN_ID","DONATION_CONTRACT_ADDRESS","SECRET_ACCRESS_KEY","DONATIONABI","option","headers","name","value","Buffer","from","toString","caver","providers","HttpProvider","DonationContract","contract","testOwnTokenId","address","ids","methods","tokenIds","call","testTokenId2Description","id","des","tokenDescription","testTokenId2Name","tokenName","testCampaignList","Number","CampaignNumber","lists","i","list","campaignList","push","testCampaignNumber","console","log","getBalance","rpc","klay","then","response","balance","utils","convertFromPeb","hexToNumberString"],"mappings":"AAAA,OAAOA,KAAP,MAA+B,UAA/B;AACA,SACEC,aADF,EAEEC,QAFF,EAGEC,yBAHF,EAIEC,kBAJF,QAKO,gCALP;AAMA,OAAOC,WAAP,MAAwB,yBAAxB;AAEA,MAAMC,MAAM,GAAG;AACbC,EAAAA,OAAO,EAAE,CACP;AACEC,IAAAA,IAAI,EAAE,eADR;AAEEC,IAAAA,KAAK,EACH,WACAC,MAAM,CAACC,IAAP,CAAYV,aAAa,GAAG,GAAhB,GAAsBG,kBAAlC,EAAsDQ,QAAtD,CACE,QADF;AAJJ,GADO,EASP;AACEJ,IAAAA,IAAI,EAAE,YADR;AAEEC,IAAAA,KAAK,EAAEP;AAFT,GATO;AADI,CAAf;AAiBA,MAAMW,KAAK,GAAG,IAAIb,KAAJ,CACZ,IAAIA,KAAK,CAACc,SAAN,CAAgBC,YAApB,CACE,0CADF,EAEE;AACAT,MAHF,CADY,CAAd;AAQA,MAAMU,gBAAgB,GAAG,IAAIH,KAAK,CAACI,QAAV,CACvBZ,WADuB,EAEvBF,yBAFuB,CAAzB;AAKA,OAAO,MAAMe,cAAc,GAAG,MAAOC,OAAP,IAA2B;AACvD,QAAMC,GAAG,GAAG,MAAMJ,gBAAgB,CAACK,OAAjB,CAAyBC,QAAzB,CAAkCH,OAAlC,EAA2CI,IAA3C,EAAlB;AACA,SAAOH,GAAP;AACD,CAHM;AAKP,OAAO,MAAMI,uBAAuB,GAAG,MAAOC,EAAP,IAAsB;AAC3D,QAAMC,GAAG,GAAG,MAAMV,gBAAgB,CAACK,OAAjB,CAAyBM,gBAAzB,CAA0CF,EAA1C,EAA8CF,IAA9C,EAAlB;AACA,SAAOG,GAAP;AACD,CAHM;AAKP,OAAO,MAAME,gBAAgB,GAAG,MAAOH,EAAP,IAAsB;AACpD,QAAMC,GAAG,GAAG,MAAMV,gBAAgB,CAACK,OAAjB,CAAyBQ,SAAzB,CAAmCJ,EAAnC,EAAuCF,IAAvC,EAAlB;AACA,SAAOG,GAAP;AACD,CAHM;AAKP,OAAO,MAAMI,gBAAgB,GAAG,YAAY;AAC1C,QAAMC,MAAM,GAAG,MAAMf,gBAAgB,CAACK,OAAjB,CAAyBW,cAAzB,GAA0CT,IAA1C,EAArB;AAEA,QAAMU,KAAK,GAAG,EAAd;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,MAApB,EAA4BG,CAAC,EAA7B,EAAiC;AAC/B,UAAMC,IAAI,GAAG,MAAMnB,gBAAgB,CAACK,OAAjB,CAAyBe,YAAzB,CAAsC,CAACF,CAAD,CAAtC,EAA2CX,IAA3C,EAAnB;AACAU,IAAAA,KAAK,CAACI,IAAN,CAAWF,IAAX;AACD;;AACD,SAAOF,KAAP;AACD,CATM;AAWP,OAAO,MAAMK,kBAAkB,GAAG,YAAY;AAC5C,QAAMP,MAAM,GAAG,MAAMf,gBAAgB,CAACK,OAAjB,CAAyBW,cAAzB,GAA0CT,IAA1C,EAArB;AACAgB,EAAAA,OAAO,CAACC,GAAR,CAAa,UAAST,MAAO,EAA7B;AACA,SAAOA,MAAP;AACD,CAJM,C,CAMP;;AACA,OAAO,MAAMU,UAAU,GAAItB,OAAD,IAAqB;AAC7C,SAAON,KAAK,CAAC6B,GAAN,CAAUC,IAAV,CAAeF,UAAf,CAA0BtB,OAA1B,EAAmCyB,IAAnC,CAAyCC,QAAD,IAAc;AAC3D,UAAMC,OAAO,GAAGjC,KAAK,CAACkC,KAAN,CAAYC,cAAZ,CACdnC,KAAK,CAACkC,KAAN,CAAYE,iBAAZ,CAA8BJ,QAA9B,CADc,EAEd,MAFc,CAAhB;AAIA,WAAOC,OAAP;AACD,GANM,CAAP;AAOD,CARM","sourcesContent":["import Caver, { AbiItem } from \"caver-js\";\nimport {\n  ACCESS_KEY_ID,\n  CHAIN_ID,\n  DONATION_CONTRACT_ADDRESS,\n  SECRET_ACCRESS_KEY,\n} from \"../constants/constants.cypress\";\nimport DONATIONABI from \"../abi/DonationABI.json\";\n\nconst option = {\n  headers: [\n    {\n      name: \"Authorization\",\n      value:\n        \"Basic \" +\n        Buffer.from(ACCESS_KEY_ID + \":\" + SECRET_ACCRESS_KEY).toString(\n          \"base64\"\n        ),\n    },\n    {\n      name: \"x-chain-id\",\n      value: CHAIN_ID,\n    },\n  ],\n};\n\nconst caver = new Caver(\n  new Caver.providers.HttpProvider(\n    \"https://node-api.klaytnapi.com/v1/klaytn\",\n    // \"https://api.baobab.klaytn.net:8651/\",\n    option\n  )\n);\n\nconst DonationContract = new caver.contract(\n  DONATIONABI as AbiItem[],\n  DONATION_CONTRACT_ADDRESS\n);\n\nexport const testOwnTokenId = async (address: string) => {\n  const ids = await DonationContract.methods.tokenIds(address).call();\n  return ids;\n};\n\nexport const testTokenId2Description = async (id: number) => {\n  const des = await DonationContract.methods.tokenDescription(id).call();\n  return des;\n};\n\nexport const testTokenId2Name = async (id: number) => {\n  const des = await DonationContract.methods.tokenName(id).call();\n  return des;\n};\n\nexport const testCampaignList = async () => {\n  const Number = await DonationContract.methods.CampaignNumber().call();\n\n  const lists = [];\n  for (let i = 0; i < Number; i++) {\n    const list = await DonationContract.methods.campaignList([i]).call();\n    lists.push(list);\n  }\n  return lists;\n};\n\nexport const testCampaignNumber = async () => {\n  const Number = await DonationContract.methods.CampaignNumber().call();\n  console.log(`number:${Number}`);\n  return Number;\n};\n\n// klip 잔고 조회시 메인넷 chain_id 필요\nexport const getBalance = (address: string) => {\n  return caver.rpc.klay.getBalance(address).then((response) => {\n    const balance = caver.utils.convertFromPeb(\n      caver.utils.hexToNumberString(response),\n      \"KLAY\"\n    );\n    return balance;\n  });\n};\n"]},"metadata":{},"sourceType":"module"}