{"ast":null,"code":"import _regeneratorRuntime from \"/Users/kimdawoon/jogakbo-nextjs/jogakbo-nextjs/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/kimdawoon/jogakbo-nextjs/jogakbo-nextjs/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport Caver, { AbiItem } from \"caver-js\";\nimport { ACCESS_KEY_ID, CHAIN_ID, JOGAKBO_CONTRACT_ADDRESS, NFT_CONTRACT_ADDRESS, SECRET_ACCRESS_KEY } from \"../constants/constants.cypress\";\nimport JOGAKBOABI from \"../abi/JogakboABI.json\";\nimport NFTABI from \"../abi/NftABI.json\";\nvar option = {\n  headers: [{\n    name: \"Authorization\",\n    value: \"Basic \" + Buffer.from(ACCESS_KEY_ID + \":\" + SECRET_ACCRESS_KEY).toString(\"base64\")\n  }, {\n    name: \"x-chain-id\",\n    value: CHAIN_ID\n  }]\n};\nvar caver = new Caver(new Caver.providers.HttpProvider(\"https://node-api.klaytnapi.com/v1/klaytn\", // \"https://api.baobab.klaytn.net:8651/\",\noption));\nexport var rs = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return caver.klay.sendTransaction({\n              type: \"VALUE_TRANSFER\",\n              from: \"0xc72af0d3c40d5E95e3424b251ceA0cD81e230Dc1\",\n              to: \"0xA52c3f53F087B3445190ADc0B038Bd78D8110eDa\",\n              gas: \"300000\",\n              value: caver.utils.toPeb(\"1\", \"KLAY\")\n            });\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function rs() {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var JogakboContract = new caver.contract(JOGAKBOABI, JOGAKBO_CONTRACT_ADDRESS);\nexport var getRefundState = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    var state;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return JogakboContract.methods.refundState().call();\n\n          case 2:\n            state = _context2.sent;\n            console.log(state);\n            return _context2.abrupt(\"return\", state);\n\n          case 5:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function getRefundState() {\n    return _ref2.apply(this, arguments);\n  };\n}(); // 테스트 완료\n\nexport var getCampaignNumber = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n    var number;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return JogakboContract.methods.CampaignNumber().call();\n\n          case 2:\n            number = _context3.sent;\n            console.log(number);\n            return _context3.abrupt(\"return\", number);\n\n          case 5:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n\n  return function getCampaignNumber() {\n    return _ref3.apply(this, arguments);\n  };\n}();\nexport var campaignList = /*#__PURE__*/function () {\n  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n    var number, lists, i, list;\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.next = 2;\n            return JogakboContract.methods.campaignNumber().call();\n\n          case 2:\n            number = _context4.sent;\n            lists = [];\n            i = 0;\n\n          case 5:\n            if (!(i < number)) {\n              _context4.next = 13;\n              break;\n            }\n\n            _context4.next = 8;\n            return JogakboContract.methods.campaignList([i]).call();\n\n          case 8:\n            list = _context4.sent;\n            lists.push(list);\n\n          case 10:\n            i++;\n            _context4.next = 5;\n            break;\n\n          case 13:\n            return _context4.abrupt(\"return\", lists);\n\n          case 14:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n\n  return function campaignList() {\n    return _ref4.apply(this, arguments);\n  };\n}(); // export const testOwnTokenId = async address => {\n//   const ids = await JogakboContract.methods.tokenIds(address).call();\n//   return ids;\n// };\n// export const testTokenId2Description = async id => {\n//   const des = await JogakboContract.methods.tokenDescription(id).call();\n//   return des;\n// };\n// export const testTokenId2Name = async id => {\n//   const des = await JogakboContract.methods.tokenName(id).call();\n//   return des;\n// };\n// export const testCampaignList = async () => {\n//   const Number = await JogakboContract.methods.CampaignNumber().call();\n//   const lists = [];\n//   for (let i = 0; i < Number; i++) {\n//     const list = await JogakboContract.methods.campaignList([i]).call();\n//     lists.push(list);\n//   }\n//   return lists;\n// };\n// export const testCampaignNumber = async () => {\n//   const Number = await JogakboContract.methods.CampaignNumber().call();\n//   console.log(`number:${Number}`);\n//   return Number;\n// };\n// klip 잔고 조회시 메인넷 chain_id 필요\n\nexport var getBalance = function getBalance(address) {\n  return caver.rpc.klay.getBalance(address).then(function (response) {\n    var balance = caver.utils.convertFromPeb(caver.utils.hexToNumberString(response), \"KLAY\");\n    return balance;\n  });\n};\nexport var fromKlaytoPeb = function fromKlaytoPeb(n) {\n  return caver.utils.convertToPeb(n);\n};","map":{"version":3,"sources":["/Users/kimdawoon/jogakbo-nextjs/jogakbo-nextjs/src/api/UseCaver.js"],"names":["Caver","AbiItem","ACCESS_KEY_ID","CHAIN_ID","JOGAKBO_CONTRACT_ADDRESS","NFT_CONTRACT_ADDRESS","SECRET_ACCRESS_KEY","JOGAKBOABI","NFTABI","option","headers","name","value","Buffer","from","toString","caver","providers","HttpProvider","rs","klay","sendTransaction","type","to","gas","utils","toPeb","JogakboContract","contract","getRefundState","methods","refundState","call","state","console","log","getCampaignNumber","CampaignNumber","number","campaignList","campaignNumber","lists","i","list","push","getBalance","address","rpc","then","response","balance","convertFromPeb","hexToNumberString","fromKlaytoPeb","n","convertToPeb"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,OAAf,QAA6B,UAA7B;AACA,SACEC,aADF,EAEEC,QAFF,EAGEC,wBAHF,EAIEC,oBAJF,EAKEC,kBALF,QAMO,gCANP;AAOA,OAAOC,UAAP,MAAuB,wBAAvB;AACA,OAAOC,MAAP,MAAmB,oBAAnB;AAEA,IAAMC,MAAM,GAAG;AACbC,EAAAA,OAAO,EAAE,CACP;AACEC,IAAAA,IAAI,EAAE,eADR;AAEEC,IAAAA,KAAK,EACH,WACAC,MAAM,CAACC,IAAP,CAAYZ,aAAa,GAAG,GAAhB,GAAsBI,kBAAlC,EAAsDS,QAAtD,CACE,QADF;AAJJ,GADO,EASP;AACEJ,IAAAA,IAAI,EAAE,YADR;AAEEC,IAAAA,KAAK,EAAET;AAFT,GATO;AADI,CAAf;AAiBA,IAAMa,KAAK,GAAG,IAAIhB,KAAJ,CACZ,IAAIA,KAAK,CAACiB,SAAN,CAAgBC,YAApB,CACE,0CADF,EAEE;AACAT,MAHF,CADY,CAAd;AAQA,OAAO,IAAMU,EAAE;AAAA,sEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACVH,KAAK,CAACI,IAAN,CAAWC,eAAX,CAA2B;AAC/BC,cAAAA,IAAI,EAAE,gBADyB;AAE/BR,cAAAA,IAAI,EAAE,4CAFyB;AAG/BS,cAAAA,EAAE,EAAE,4CAH2B;AAI/BC,cAAAA,GAAG,EAAE,QAJ0B;AAK/BZ,cAAAA,KAAK,EAAEI,KAAK,CAACS,KAAN,CAAYC,KAAZ,CAAkB,GAAlB,EAAuB,MAAvB;AALwB,aAA3B,CADU;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAFP,EAAE;AAAA;AAAA;AAAA,GAAR;AAUP,OAAO,IAAMQ,eAAe,GAAG,IAAIX,KAAK,CAACY,QAAV,CAC7BrB,UAD6B,EAE7BH,wBAF6B,CAAxB;AAKP,OAAO,IAAMyB,cAAc;AAAA,uEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACRF,eAAe,CAACG,OAAhB,CAAwBC,WAAxB,GAAsCC,IAAtC,EADQ;;AAAA;AACtBC,YAAAA,KADsB;AAE5BC,YAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AAF4B,8CAGrBA,KAHqB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAdJ,cAAc;AAAA;AAAA;AAAA,GAApB,C,CAMP;;AACA,OAAO,IAAMO,iBAAiB;AAAA,uEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACVT,eAAe,CAACG,OAAhB,CAAwBO,cAAxB,GAAyCL,IAAzC,EADU;;AAAA;AACzBM,YAAAA,MADyB;AAE/BJ,YAAAA,OAAO,CAACC,GAAR,CAAYG,MAAZ;AAF+B,8CAGxBA,MAHwB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAjBF,iBAAiB;AAAA;AAAA;AAAA,GAAvB;AAMP,OAAO,IAAMG,YAAY;AAAA,uEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACLZ,eAAe,CAACG,OAAhB,CAAwBU,cAAxB,GAAyCR,IAAzC,EADK;;AAAA;AACpBM,YAAAA,MADoB;AAEpBG,YAAAA,KAFoB,GAEZ,EAFY;AAGjBC,YAAAA,CAHiB,GAGb,CAHa;;AAAA;AAAA,kBAGVA,CAAC,GAAGJ,MAHM;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAILX,eAAe,CAACG,OAAhB,CAAwBS,YAAxB,CAAqC,CAACG,CAAD,CAArC,EAA0CV,IAA1C,EAJK;;AAAA;AAIlBW,YAAAA,IAJkB;AAKxBF,YAAAA,KAAK,CAACG,IAAN,CAAWD,IAAX;;AALwB;AAGED,YAAAA,CAAC,EAHH;AAAA;AAAA;;AAAA;AAAA,8CAOnBD,KAPmB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAZF,YAAY;AAAA;AAAA;AAAA,GAAlB,C,CAUP;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;;AACA,OAAO,IAAMM,UAAU,GAAG,SAAbA,UAAa,CAAAC,OAAO,EAAI;AACnC,SAAO9B,KAAK,CAAC+B,GAAN,CAAU3B,IAAV,CAAeyB,UAAf,CAA0BC,OAA1B,EAAmCE,IAAnC,CAAwC,UAAAC,QAAQ,EAAI;AACzD,QAAMC,OAAO,GAAGlC,KAAK,CAACS,KAAN,CAAY0B,cAAZ,CACdnC,KAAK,CAACS,KAAN,CAAY2B,iBAAZ,CAA8BH,QAA9B,CADc,EAEd,MAFc,CAAhB;AAIA,WAAOC,OAAP;AACD,GANM,CAAP;AAOD,CARM;AAUP,OAAO,IAAMG,aAAa,GAAG,SAAhBA,aAAgB,CAAAC,CAAC,EAAI;AAChC,SAAOtC,KAAK,CAACS,KAAN,CAAY8B,YAAZ,CAAyBD,CAAzB,CAAP;AACD,CAFM","sourcesContent":["import Caver, {AbiItem} from \"caver-js\";\nimport {\n  ACCESS_KEY_ID,\n  CHAIN_ID,\n  JOGAKBO_CONTRACT_ADDRESS,\n  NFT_CONTRACT_ADDRESS,\n  SECRET_ACCRESS_KEY,\n} from \"../constants/constants.cypress\";\nimport JOGAKBOABI from \"../abi/JogakboABI.json\";\nimport NFTABI from \"../abi/NftABI.json\";\n\nconst option = {\n  headers: [\n    {\n      name: \"Authorization\",\n      value:\n        \"Basic \" +\n        Buffer.from(ACCESS_KEY_ID + \":\" + SECRET_ACCRESS_KEY).toString(\n          \"base64\",\n        ),\n    },\n    {\n      name: \"x-chain-id\",\n      value: CHAIN_ID,\n    },\n  ],\n};\n\nconst caver = new Caver(\n  new Caver.providers.HttpProvider(\n    \"https://node-api.klaytnapi.com/v1/klaytn\",\n    // \"https://api.baobab.klaytn.net:8651/\",\n    option,\n  ),\n);\n\nexport const rs = async () => {\n  await caver.klay.sendTransaction({\n    type: \"VALUE_TRANSFER\",\n    from: \"0xc72af0d3c40d5E95e3424b251ceA0cD81e230Dc1\",\n    to: \"0xA52c3f53F087B3445190ADc0B038Bd78D8110eDa\",\n    gas: \"300000\",\n    value: caver.utils.toPeb(\"1\", \"KLAY\"),\n  });\n};\n\nexport const JogakboContract = new caver.contract(\n  JOGAKBOABI,\n  JOGAKBO_CONTRACT_ADDRESS,\n);\n\nexport const getRefundState = async () => {\n  const state = await JogakboContract.methods.refundState().call();\n  console.log(state);\n  return state;\n};\n\n// 테스트 완료\nexport const getCampaignNumber = async () => {\n  const number = await JogakboContract.methods.CampaignNumber().call();\n  console.log(number);\n  return number;\n};\n\nexport const campaignList = async () => {\n  const number = await JogakboContract.methods.campaignNumber().call();\n  const lists = [];\n  for (let i = 0; i < number; i++) {\n    const list = await JogakboContract.methods.campaignList([i]).call();\n    lists.push(list);\n  }\n  return lists;\n};\n\n// export const testOwnTokenId = async address => {\n//   const ids = await JogakboContract.methods.tokenIds(address).call();\n//   return ids;\n// };\n\n// export const testTokenId2Description = async id => {\n//   const des = await JogakboContract.methods.tokenDescription(id).call();\n//   return des;\n// };\n\n// export const testTokenId2Name = async id => {\n//   const des = await JogakboContract.methods.tokenName(id).call();\n//   return des;\n// };\n\n// export const testCampaignList = async () => {\n//   const Number = await JogakboContract.methods.CampaignNumber().call();\n\n//   const lists = [];\n//   for (let i = 0; i < Number; i++) {\n//     const list = await JogakboContract.methods.campaignList([i]).call();\n//     lists.push(list);\n//   }\n//   return lists;\n// };\n\n// export const testCampaignNumber = async () => {\n//   const Number = await JogakboContract.methods.CampaignNumber().call();\n//   console.log(`number:${Number}`);\n//   return Number;\n// };\n\n// klip 잔고 조회시 메인넷 chain_id 필요\nexport const getBalance = address => {\n  return caver.rpc.klay.getBalance(address).then(response => {\n    const balance = caver.utils.convertFromPeb(\n      caver.utils.hexToNumberString(response),\n      \"KLAY\",\n    );\n    return balance;\n  });\n};\n\nexport const fromKlaytoPeb = n => {\n  return caver.utils.convertToPeb(n);\n};\n"]},"metadata":{},"sourceType":"module"}