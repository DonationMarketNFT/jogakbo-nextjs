{"ast":null,"code":"import _regeneratorRuntime from \"/Users/kimdawoon/jogakbo-nextjs/jogakbo-nextjs/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/kimdawoon/jogakbo-nextjs/jogakbo-nextjs/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport Caver from \"caver-js\";\nimport { getAccount, getUserAddress, postAccount } from \"./accountWc\";\nexport var kaikas = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(setMyAddress) {\n    var provider, _accounts;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (typeof window.klaytn !== \"undefined\") {\n              provider = window[\"klaytn\"]; // Kaikas user detected. You can now use the provider.\n            }\n\n            _context.prev = 1;\n            _context.next = 4;\n            return window.klaytn.enable();\n\n          case 4:\n            _accounts = _context.sent;\n            _context.next = 7;\n            return postAccount(_accounts[0], \"kaikas\", setMyAddress);\n\n          case 7:\n            return _context.abrupt(\"return\", _accounts[0]);\n\n          case 10:\n            _context.prev = 10;\n            _context.t0 = _context[\"catch\"](1);\n            console.error(_context.t0);\n            _context.next = 15;\n            return postAccount(accounts[0], \"kaikas\", setMyAddress);\n\n          case 15:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[1, 10]]);\n  }));\n\n  return function kaikas(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var testKaikas = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function testKaikas() {\n    return _ref2.apply(this, arguments);\n  };\n}(); // useEffect(() => {\n//   console.log(1);\n//   window.klaytn.on(\"accountsChanged\", function (accounts) {\n//     // kaikas에서 계정을 변경할 때 마다 내부의 함수가 실행됩니다.\n//     console.log(accounts[0]);\n//   });\n// }, [accounts]);\n// export const CheckUnlocked = async () => {\n//   // 지갑이 연결되어있다면 true, 아니라면 false를 리턴합니다.\n//   console.log(await window.klaytn._kaikas.isUnlocked());\n// };","map":{"version":3,"sources":["/Users/kimdawoon/jogakbo-nextjs/jogakbo-nextjs/src/api/useKaikas.js"],"names":["Caver","getAccount","getUserAddress","postAccount","kaikas","setMyAddress","window","klaytn","provider","enable","accounts","console","error","testKaikas"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,UAAlB;AACA,SAAQC,UAAR,EAAoBC,cAApB,EAAoCC,WAApC,QAAsD,aAAtD;AAEA,OAAO,IAAMC,MAAM;AAAA,sEAAG,iBAAMC,YAAN;AAAA;;AAAA;AAAA;AAAA;AAAA;AACpB,gBAAI,OAAOC,MAAM,CAACC,MAAd,KAAyB,WAA7B,EAA0C;AAClCC,cAAAA,QADkC,GACvBF,MAAM,CAAC,QAAD,CADiB,EAExC;AACD;;AAJmB;AAAA;AAAA,mBAMKA,MAAM,CAACC,MAAP,CAAcE,MAAd,EANL;;AAAA;AAMZC,YAAAA,SANY;AAAA;AAAA,mBAOZP,WAAW,CAACO,SAAQ,CAAC,CAAD,CAAT,EAAc,QAAd,EAAwBL,YAAxB,CAPC;;AAAA;AAAA,6CAQXK,SAAQ,CAAC,CAAD,CARG;;AAAA;AAAA;AAAA;AAUlBC,YAAAA,OAAO,CAACC,KAAR;AAVkB;AAAA,mBAWZT,WAAW,CAACO,QAAQ,CAAC,CAAD,CAAT,EAAc,QAAd,EAAwBL,YAAxB,CAXC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAND,MAAM;AAAA;AAAA;AAAA,GAAZ;AAeP,OAAO,IAAMS,UAAU;AAAA,uEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAVA,UAAU;AAAA;AAAA;AAAA,GAAhB,C,CAEP;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA","sourcesContent":["import Caver from \"caver-js\";\nimport {getAccount, getUserAddress, postAccount} from \"./accountWc\";\n\nexport const kaikas = async setMyAddress => {\n  if (typeof window.klaytn !== \"undefined\") {\n    const provider = window[\"klaytn\"];\n    // Kaikas user detected. You can now use the provider.\n  }\n  try {\n    const accounts = await window.klaytn.enable();\n    await postAccount(accounts[0], \"kaikas\", setMyAddress);\n    return accounts[0];\n  } catch (error) {\n    console.error(error);\n    await postAccount(accounts[0], \"kaikas\", setMyAddress);\n  }\n};\n\nexport const testKaikas = async () => {};\n\n// useEffect(() => {\n//   console.log(1);\n//   window.klaytn.on(\"accountsChanged\", function (accounts) {\n//     // kaikas에서 계정을 변경할 때 마다 내부의 함수가 실행됩니다.\n\n//     console.log(accounts[0]);\n//   });\n// }, [accounts]);\n\n// export const CheckUnlocked = async () => {\n//   // 지갑이 연결되어있다면 true, 아니라면 false를 리턴합니다.\n//   console.log(await window.klaytn._kaikas.isUnlocked());\n// };\n"]},"metadata":{},"sourceType":"module"}