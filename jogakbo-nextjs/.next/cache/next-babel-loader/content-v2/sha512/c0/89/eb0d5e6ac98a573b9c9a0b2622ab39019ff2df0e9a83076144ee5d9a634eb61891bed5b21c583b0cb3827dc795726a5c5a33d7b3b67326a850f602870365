{"ast":null,"code":"import axios from \"axios\";\nimport Caver from \"caver-js\";\nimport { getAccount, getUserAddress, postAccount } from \"./accountWc\";\nimport { login, logout } from \"./Login\"; // const loginPOST = async myAddress => {\n//   const credentials = {myAddress};\n//   const user = await axios.post(\"/api/auth/login\", credentials);\n//   console.log(user);\n// };\n\nexport const kaikas = async (myAddress, setMyAddress) => {\n  if (typeof window.klaytn !== \"undefined\") {\n    const provider = window[\"klaytn\"]; // Kaikas user detected. You can now use the provider.\n  }\n\n  try {\n    const accounts = await window.klaytn.enable();\n    postAccount(accounts[0], \"kaikas\", setMyAddress); // loginPOST(accounts[0]);\n\n    return accounts[0];\n  } catch (error) {\n    // console.error(error);\n    postAccount(accounts[0], \"kaikas\", setMyAddress); // loginPOST(accounts[0]);\n  }\n};\nexport const testKaikas = async callback => {\n  await klaytn.on(\"accountsChanged\", function (accounts) {\n    console.log(\"계정바뀜\", accounts[0]);\n    login(accounts[0], callback);\n  });\n};\nexport const confirmKaikas = async () => {\n  const inUnlocked = await window.klaytn._kaikas.isUnlocked();\n\n  if (!inUnlocked) {\n    logout();\n  }\n\n  console.log(inUnlocked);\n}; // useEffect(() => {\n//   console.log(1);\n//   window.klaytn.on(\"accountsChanged\", function (accounts) {\n//     // kaikas에서 계정을 변경할 때 마다 내부의 함수가 실행됩니다.\n//     console.log(accounts[0]);\n//   });\n// }, [accounts]);\n// export const CheckUnlocked = async () => {\n//   // 지갑이 연결되어있다면 true, 아니라면 false를 리턴합니다.\n//   console.log(await window.klaytn._kaikas.isUnlocked());\n// };","map":{"version":3,"sources":["/Users/kimdawoon/jogakbo-nextjs/jogakbo-nextjs/src/api/useKaikas.js"],"names":["axios","Caver","getAccount","getUserAddress","postAccount","login","logout","kaikas","myAddress","setMyAddress","window","klaytn","provider","accounts","enable","error","testKaikas","callback","on","console","log","confirmKaikas","inUnlocked","_kaikas","isUnlocked"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,UAAlB;AACA,SAAQC,UAAR,EAAoBC,cAApB,EAAoCC,WAApC,QAAsD,aAAtD;AACA,SAAQC,KAAR,EAAeC,MAAf,QAA4B,SAA5B,C,CAEA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,MAAM,GAAG,OAAOC,SAAP,EAAkBC,YAAlB,KAAmC;AACvD,MAAI,OAAOC,MAAM,CAACC,MAAd,KAAyB,WAA7B,EAA0C;AACxC,UAAMC,QAAQ,GAAGF,MAAM,CAAC,QAAD,CAAvB,CADwC,CAExC;AACD;;AACD,MAAI;AACF,UAAMG,QAAQ,GAAG,MAAMH,MAAM,CAACC,MAAP,CAAcG,MAAd,EAAvB;AACAV,IAAAA,WAAW,CAACS,QAAQ,CAAC,CAAD,CAAT,EAAc,QAAd,EAAwBJ,YAAxB,CAAX,CAFE,CAGF;;AACA,WAAOI,QAAQ,CAAC,CAAD,CAAf;AACD,GALD,CAKE,OAAOE,KAAP,EAAc;AACd;AACAX,IAAAA,WAAW,CAACS,QAAQ,CAAC,CAAD,CAAT,EAAc,QAAd,EAAwBJ,YAAxB,CAAX,CAFc,CAGd;AACD;AACF,CAfM;AAiBP,OAAO,MAAMO,UAAU,GAAG,MAAMC,QAAN,IAAkB;AAC1C,QAAMN,MAAM,CAACO,EAAP,CAAU,iBAAV,EAA6B,UAAUL,QAAV,EAAoB;AACrDM,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBP,QAAQ,CAAC,CAAD,CAA5B;AACAR,IAAAA,KAAK,CAACQ,QAAQ,CAAC,CAAD,CAAT,EAAcI,QAAd,CAAL;AACD,GAHK,CAAN;AAID,CALM;AAOP,OAAO,MAAMI,aAAa,GAAG,YAAY;AACvC,QAAMC,UAAU,GAAG,MAAMZ,MAAM,CAACC,MAAP,CAAcY,OAAd,CAAsBC,UAAtB,EAAzB;;AACA,MAAI,CAACF,UAAL,EAAiB;AACfhB,IAAAA,MAAM;AACP;;AACDa,EAAAA,OAAO,CAACC,GAAR,CAAYE,UAAZ;AACD,CANM,C,CAQP;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA","sourcesContent":["import axios from \"axios\";\nimport Caver from \"caver-js\";\nimport {getAccount, getUserAddress, postAccount} from \"./accountWc\";\nimport {login, logout} from \"./Login\";\n\n// const loginPOST = async myAddress => {\n//   const credentials = {myAddress};\n//   const user = await axios.post(\"/api/auth/login\", credentials);\n//   console.log(user);\n// };\n\nexport const kaikas = async (myAddress, setMyAddress) => {\n  if (typeof window.klaytn !== \"undefined\") {\n    const provider = window[\"klaytn\"];\n    // Kaikas user detected. You can now use the provider.\n  }\n  try {\n    const accounts = await window.klaytn.enable();\n    postAccount(accounts[0], \"kaikas\", setMyAddress);\n    // loginPOST(accounts[0]);\n    return accounts[0];\n  } catch (error) {\n    // console.error(error);\n    postAccount(accounts[0], \"kaikas\", setMyAddress);\n    // loginPOST(accounts[0]);\n  }\n};\n\nexport const testKaikas = async callback => {\n  await klaytn.on(\"accountsChanged\", function (accounts) {\n    console.log(\"계정바뀜\", accounts[0]);\n    login(accounts[0], callback);\n  });\n};\n\nexport const confirmKaikas = async () => {\n  const inUnlocked = await window.klaytn._kaikas.isUnlocked();\n  if (!inUnlocked) {\n    logout();\n  }\n  console.log(inUnlocked);\n};\n\n// useEffect(() => {\n//   console.log(1);\n//   window.klaytn.on(\"accountsChanged\", function (accounts) {\n//     // kaikas에서 계정을 변경할 때 마다 내부의 함수가 실행됩니다.\n\n//     console.log(accounts[0]);\n//   });\n// }, [accounts]);\n\n// export const CheckUnlocked = async () => {\n//   // 지갑이 연결되어있다면 true, 아니라면 false를 리턴합니다.\n//   console.log(await window.klaytn._kaikas.isUnlocked());\n// };\n"]},"metadata":{},"sourceType":"module"}