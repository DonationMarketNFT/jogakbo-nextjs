{"ast":null,"code":"import _regeneratorRuntime from \"/Users/kimdawoon/jogakbo-nextjs/jogakbo-nextjs/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/kimdawoon/jogakbo-nextjs/jogakbo-nextjs/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport axios from \"axios\";\nimport Caver from \"caver-js\";\nimport { getAccount, getUserAddress, postAccount } from \"./accountWc\";\nimport { login, logout } from \"./Login\"; // const loginPOST = async myAddress => {\n//   const credentials = {myAddress};\n//   const user = await axios.post(\"/api/auth/login\", credentials);\n//   console.log(user);\n// };\n\nexport var kaikas = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(myAddress, setMyAddress) {\n    var provider, _accounts;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (typeof window.klaytn !== \"undefined\") {\n              provider = window[\"klaytn\"]; // Kaikas user detected. You can now use the provider.\n            }\n\n            _context.prev = 1;\n            _context.next = 4;\n            return window.klaytn.enable();\n\n          case 4:\n            _accounts = _context.sent;\n            postAccount(_accounts[0], \"kaikas\", setMyAddress); // loginPOST(accounts[0]);\n\n            return _context.abrupt(\"return\", _accounts[0]);\n\n          case 9:\n            _context.prev = 9;\n            _context.t0 = _context[\"catch\"](1);\n            // console.error(error);\n            postAccount(accounts[0], \"kaikas\", setMyAddress); // loginPOST(accounts[0]);\n\n          case 12:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[1, 9]]);\n  }));\n\n  return function kaikas(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var testKaikas = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(callback) {\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return klaytn.on(\"accountsChanged\", function (accounts) {\n              console.log(\"계정바뀜\", accounts[0]);\n              login(accounts[0], callback);\n            });\n\n          case 2:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function testKaikas(_x3) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var confirmKaikas = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n    var inUnlocked;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return window.klaytn._kaikas.isUnlocked();\n\n          case 2:\n            inUnlocked = _context3.sent;\n\n            if (!inUnlocked) {\n              logout();\n            }\n\n            console.log(inUnlocked);\n\n          case 5:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n\n  return function confirmKaikas() {\n    return _ref3.apply(this, arguments);\n  };\n}(); // useEffect(() => {\n//   console.log(1);\n//   window.klaytn.on(\"accountsChanged\", function (accounts) {\n//     // kaikas에서 계정을 변경할 때 마다 내부의 함수가 실행됩니다.\n//     console.log(accounts[0]);\n//   });\n// }, [accounts]);\n// export const CheckUnlocked = async () => {\n//   // 지갑이 연결되어있다면 true, 아니라면 false를 리턴합니다.\n//   console.log(await window.klaytn._kaikas.isUnlocked());\n// };","map":{"version":3,"sources":["/Users/kimdawoon/jogakbo-nextjs/jogakbo-nextjs/src/api/useKaikas.js"],"names":["axios","Caver","getAccount","getUserAddress","postAccount","login","logout","kaikas","myAddress","setMyAddress","window","klaytn","provider","enable","accounts","testKaikas","callback","on","console","log","confirmKaikas","_kaikas","isUnlocked","inUnlocked"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,UAAlB;AACA,SAAQC,UAAR,EAAoBC,cAApB,EAAoCC,WAApC,QAAsD,aAAtD;AACA,SAAQC,KAAR,EAAeC,MAAf,QAA4B,SAA5B,C,CAEA;AACA;AACA;AACA;AACA;;AAEA,OAAO,IAAMC,MAAM;AAAA,sEAAG,iBAAOC,SAAP,EAAkBC,YAAlB;AAAA;;AAAA;AAAA;AAAA;AAAA;AACpB,gBAAI,OAAOC,MAAM,CAACC,MAAd,KAAyB,WAA7B,EAA0C;AAClCC,cAAAA,QADkC,GACvBF,MAAM,CAAC,QAAD,CADiB,EAExC;AACD;;AAJmB;AAAA;AAAA,mBAMKA,MAAM,CAACC,MAAP,CAAcE,MAAd,EANL;;AAAA;AAMZC,YAAAA,SANY;AAOlBV,YAAAA,WAAW,CAACU,SAAQ,CAAC,CAAD,CAAT,EAAc,QAAd,EAAwBL,YAAxB,CAAX,CAPkB,CAQlB;;AARkB,6CASXK,SAAQ,CAAC,CAAD,CATG;;AAAA;AAAA;AAAA;AAWlB;AACAV,YAAAA,WAAW,CAACU,QAAQ,CAAC,CAAD,CAAT,EAAc,QAAd,EAAwBL,YAAxB,CAAX,CAZkB,CAalB;;AAbkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAANF,MAAM;AAAA;AAAA;AAAA,GAAZ;AAiBP,OAAO,IAAMQ,UAAU;AAAA,uEAAG,kBAAMC,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAClBL,MAAM,CAACM,EAAP,CAAU,iBAAV,EAA6B,UAAUH,QAAV,EAAoB;AACrDI,cAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBL,QAAQ,CAAC,CAAD,CAA5B;AACAT,cAAAA,KAAK,CAACS,QAAQ,CAAC,CAAD,CAAT,EAAcE,QAAd,CAAL;AACD,aAHK,CADkB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAVD,UAAU;AAAA;AAAA;AAAA,GAAhB;AAOP,OAAO,IAAMK,aAAa;AAAA,uEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACFV,MAAM,CAACC,MAAP,CAAcU,OAAd,CAAsBC,UAAtB,EADE;;AAAA;AACrBC,YAAAA,UADqB;;AAE3B,gBAAI,CAACA,UAAL,EAAiB;AACfjB,cAAAA,MAAM;AACP;;AACDY,YAAAA,OAAO,CAACC,GAAR,CAAYI,UAAZ;;AAL2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAbH,aAAa;AAAA;AAAA;AAAA,GAAnB,C,CAQP;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA","sourcesContent":["import axios from \"axios\";\nimport Caver from \"caver-js\";\nimport {getAccount, getUserAddress, postAccount} from \"./accountWc\";\nimport {login, logout} from \"./Login\";\n\n// const loginPOST = async myAddress => {\n//   const credentials = {myAddress};\n//   const user = await axios.post(\"/api/auth/login\", credentials);\n//   console.log(user);\n// };\n\nexport const kaikas = async (myAddress, setMyAddress) => {\n  if (typeof window.klaytn !== \"undefined\") {\n    const provider = window[\"klaytn\"];\n    // Kaikas user detected. You can now use the provider.\n  }\n  try {\n    const accounts = await window.klaytn.enable();\n    postAccount(accounts[0], \"kaikas\", setMyAddress);\n    // loginPOST(accounts[0]);\n    return accounts[0];\n  } catch (error) {\n    // console.error(error);\n    postAccount(accounts[0], \"kaikas\", setMyAddress);\n    // loginPOST(accounts[0]);\n  }\n};\n\nexport const testKaikas = async callback => {\n  await klaytn.on(\"accountsChanged\", function (accounts) {\n    console.log(\"계정바뀜\", accounts[0]);\n    login(accounts[0], callback);\n  });\n};\n\nexport const confirmKaikas = async () => {\n  const inUnlocked = await window.klaytn._kaikas.isUnlocked();\n  if (!inUnlocked) {\n    logout();\n  }\n  console.log(inUnlocked);\n};\n\n// useEffect(() => {\n//   console.log(1);\n//   window.klaytn.on(\"accountsChanged\", function (accounts) {\n//     // kaikas에서 계정을 변경할 때 마다 내부의 함수가 실행됩니다.\n\n//     console.log(accounts[0]);\n//   });\n// }, [accounts]);\n\n// export const CheckUnlocked = async () => {\n//   // 지갑이 연결되어있다면 true, 아니라면 false를 리턴합니다.\n//   console.log(await window.klaytn._kaikas.isUnlocked());\n// };\n"]},"metadata":{},"sourceType":"module"}