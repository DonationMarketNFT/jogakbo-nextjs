{"ast":null,"code":"import _regeneratorRuntime from \"/Users/kimdawoon/jogakbo-nextjs/jogakbo-nextjs/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/kimdawoon/jogakbo-nextjs/jogakbo-nextjs/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport Caver from \"caver-js\";\nimport { ACCESS_KEY_ID, CHAIN_ID, JOGAKBO_CONTRACT_ADDRESS, SECRET_ACCRESS_KEY } from \"constants/constants.baobab\";\nimport { postAccount } from \"./accountWc\";\nimport { login, logout } from \"./Login\";\nimport JOGAKBOABI from \"../abi/JogakboABI.json\";\nexport var kaikas = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(myAddress, setMyAddress) {\n    var provider, _accounts;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (typeof window.klaytn !== \"undefined\") {\n              provider = window[\"klaytn\"];\n            }\n\n            _context.prev = 1;\n            _context.next = 4;\n            return window.klaytn.enable();\n\n          case 4:\n            _accounts = _context.sent;\n            postAccount(_accounts[0], \"kaikas\", setMyAddress);\n            return _context.abrupt(\"return\", _accounts[0]);\n\n          case 9:\n            _context.prev = 9;\n            _context.t0 = _context[\"catch\"](1);\n            postAccount(accounts[0], \"kaikas\", setMyAddress);\n\n          case 12:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[1, 9]]);\n  }));\n\n  return function kaikas(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var testKaikas = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(callback) {\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return window.klaytn.on(\"accountsChanged\", function (accounts) {\n              console.log(\"계정바뀜\", accounts[0]);\n              login(accounts[0], callback);\n            });\n\n          case 2:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function testKaikas(_x3) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var confirmKaikas = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n    var inUnlocked;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return window.klaytn._kaikas.isUnlocked();\n\n          case 2:\n            inUnlocked = _context3.sent;\n\n            if (!inUnlocked) {\n              logout();\n            }\n\n            console.log(inUnlocked);\n\n          case 5:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n\n  return function confirmKaikas() {\n    return _ref3.apply(this, arguments);\n  };\n}(); // export const test1 = async () => {\n//   const results = await test.methods.createCampaign();\n// };\n// const caver = new Caver(JOGAKBOABI, JOGAKBO_CONTRACT_ADDRESS);\n// const caver = new Caver(window.klaytn);\n// const tx = {\n//   type: \"SMART_CONTRACT_EXECUTION\",\n//   from: sender.address,\n//   to: contractAddress,\n//   data: nftContract.methods\n//     .transferFrom(sender.address, receiver, tokenId)\n//     .encodeABI(),\n//   gas: \"300000\",\n//   value: 0,\n// };\n// caver.klay\n//   .sendTransaction({\n//     from: klaytn.selectedAddress,\n//     to: JOGAKBO_CONTRACT_ADDRESS,\n//     value: \"1000000000\",\n//   })\n//   .then(receipt => {});\n// export const sendTransaction = () => {\n//   caver.klay\n//     .sendTransaction({\n//       type: \"VALUE_TRANSFER\",\n//       from: klaytn.selectedAddress,\n//       to: \"0xa52c3f53f087b3445190adc0b038bd78d8110eda\",\n//       value: caver.utils.toPeb(\"1\", \"KLAY\"),\n//       gas: 80000000,\n//     })\n//     .once(\"transactionHash\", transactionHash => {\n//       console.log(\"txHash\", transactionHash);\n//     })\n//     .once(\"receipt\", receipt => {\n//       console.log(\"receipt\", receipt);\n//     })\n//     .once(\"error\", error => {\n//       console.log(\"error\", error);\n//     });\n// };","map":{"version":3,"sources":["/Users/kimdawoon/jogakbo-nextjs/jogakbo-nextjs/src/api/useKaikas.js"],"names":["Caver","ACCESS_KEY_ID","CHAIN_ID","JOGAKBO_CONTRACT_ADDRESS","SECRET_ACCRESS_KEY","postAccount","login","logout","JOGAKBOABI","kaikas","myAddress","setMyAddress","window","klaytn","provider","enable","accounts","testKaikas","callback","on","console","log","confirmKaikas","_kaikas","isUnlocked","inUnlocked"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,UAAlB;AACA,SACEC,aADF,EAEEC,QAFF,EAGEC,wBAHF,EAIEC,kBAJF,QAKO,4BALP;AAMA,SAAQC,WAAR,QAA0B,aAA1B;AACA,SAAQC,KAAR,EAAeC,MAAf,QAA4B,SAA5B;AACA,OAAOC,UAAP,MAAuB,wBAAvB;AAEA,OAAO,IAAMC,MAAM;AAAA,sEAAG,iBAAOC,SAAP,EAAkBC,YAAlB;AAAA;;AAAA;AAAA;AAAA;AAAA;AACpB,gBAAI,OAAOC,MAAM,CAACC,MAAd,KAAyB,WAA7B,EAA0C;AAClCC,cAAAA,QADkC,GACvBF,MAAM,CAAC,QAAD,CADiB;AAEzC;;AAHmB;AAAA;AAAA,mBAKKA,MAAM,CAACC,MAAP,CAAcE,MAAd,EALL;;AAAA;AAKZC,YAAAA,SALY;AAMlBX,YAAAA,WAAW,CAACW,SAAQ,CAAC,CAAD,CAAT,EAAc,QAAd,EAAwBL,YAAxB,CAAX;AANkB,6CAOXK,SAAQ,CAAC,CAAD,CAPG;;AAAA;AAAA;AAAA;AASlBX,YAAAA,WAAW,CAACW,QAAQ,CAAC,CAAD,CAAT,EAAc,QAAd,EAAwBL,YAAxB,CAAX;;AATkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAANF,MAAM;AAAA;AAAA;AAAA,GAAZ;AAaP,OAAO,IAAMQ,UAAU;AAAA,uEAAG,kBAAMC,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAClBN,MAAM,CAACC,MAAP,CAAcM,EAAd,CAAiB,iBAAjB,EAAoC,UAAUH,QAAV,EAAoB;AAC5DI,cAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBL,QAAQ,CAAC,CAAD,CAA5B;AACAV,cAAAA,KAAK,CAACU,QAAQ,CAAC,CAAD,CAAT,EAAcE,QAAd,CAAL;AACD,aAHK,CADkB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAVD,UAAU;AAAA;AAAA;AAAA,GAAhB;AAOP,OAAO,IAAMK,aAAa;AAAA,uEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACFV,MAAM,CAACC,MAAP,CAAcU,OAAd,CAAsBC,UAAtB,EADE;;AAAA;AACrBC,YAAAA,UADqB;;AAE3B,gBAAI,CAACA,UAAL,EAAiB;AACflB,cAAAA,MAAM;AACP;;AACDa,YAAAA,OAAO,CAACC,GAAR,CAAYI,UAAZ;;AAL2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAbH,aAAa;AAAA;AAAA;AAAA,GAAnB,C,CAQP;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import Caver from \"caver-js\";\nimport {\n  ACCESS_KEY_ID,\n  CHAIN_ID,\n  JOGAKBO_CONTRACT_ADDRESS,\n  SECRET_ACCRESS_KEY,\n} from \"constants/constants.baobab\";\nimport {postAccount} from \"./accountWc\";\nimport {login, logout} from \"./Login\";\nimport JOGAKBOABI from \"../abi/JogakboABI.json\";\n\nexport const kaikas = async (myAddress, setMyAddress) => {\n  if (typeof window.klaytn !== \"undefined\") {\n    const provider = window[\"klaytn\"];\n  }\n  try {\n    const accounts = await window.klaytn.enable();\n    postAccount(accounts[0], \"kaikas\", setMyAddress);\n    return accounts[0];\n  } catch (error) {\n    postAccount(accounts[0], \"kaikas\", setMyAddress);\n  }\n};\n\nexport const testKaikas = async callback => {\n  await window.klaytn.on(\"accountsChanged\", function (accounts) {\n    console.log(\"계정바뀜\", accounts[0]);\n    login(accounts[0], callback);\n  });\n};\n\nexport const confirmKaikas = async () => {\n  const inUnlocked = await window.klaytn._kaikas.isUnlocked();\n  if (!inUnlocked) {\n    logout();\n  }\n  console.log(inUnlocked);\n};\n\n// export const test1 = async () => {\n//   const results = await test.methods.createCampaign();\n// };\n\n// const caver = new Caver(JOGAKBOABI, JOGAKBO_CONTRACT_ADDRESS);\n// const caver = new Caver(window.klaytn);\n\n// const tx = {\n//   type: \"SMART_CONTRACT_EXECUTION\",\n//   from: sender.address,\n//   to: contractAddress,\n//   data: nftContract.methods\n//     .transferFrom(sender.address, receiver, tokenId)\n//     .encodeABI(),\n//   gas: \"300000\",\n//   value: 0,\n// };\n\n// caver.klay\n//   .sendTransaction({\n//     from: klaytn.selectedAddress,\n//     to: JOGAKBO_CONTRACT_ADDRESS,\n//     value: \"1000000000\",\n//   })\n//   .then(receipt => {});\n\n// export const sendTransaction = () => {\n//   caver.klay\n//     .sendTransaction({\n//       type: \"VALUE_TRANSFER\",\n//       from: klaytn.selectedAddress,\n//       to: \"0xa52c3f53f087b3445190adc0b038bd78d8110eda\",\n//       value: caver.utils.toPeb(\"1\", \"KLAY\"),\n//       gas: 80000000,\n//     })\n//     .once(\"transactionHash\", transactionHash => {\n//       console.log(\"txHash\", transactionHash);\n//     })\n//     .once(\"receipt\", receipt => {\n//       console.log(\"receipt\", receipt);\n//     })\n//     .once(\"error\", error => {\n//       console.log(\"error\", error);\n//     });\n// };\n"]},"metadata":{},"sourceType":"module"}