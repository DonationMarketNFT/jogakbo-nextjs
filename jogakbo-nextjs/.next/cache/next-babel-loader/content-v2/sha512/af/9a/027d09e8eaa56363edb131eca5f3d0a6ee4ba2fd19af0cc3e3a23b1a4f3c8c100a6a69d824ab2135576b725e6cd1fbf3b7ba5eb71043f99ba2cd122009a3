{"ast":null,"code":"import { sign } from \"jsonwebtoken\";\nimport { serialize } from \"cookie\";\nconst secret = process.env.SECRET;\nexport default async function (req, res) {\n  const {\n    myAddress\n  } = req.body; // Check in the database\n  // if a user with this username\n  // and password exists\n\n  if (myAddress !== \"0x00\") {\n    const token = sign({\n      exp: Math.floor(Date.now() / 1000) + 60 * 60 * 24 * 30,\n      // 30 days\n      address: myAddress\n    }, secret);\n    const serialised = serialize(\"OursiteJWT\", token, {\n      httpOnly: true,\n      secure: false,\n      sameSite: \"strict\",\n      maxAge: 60 * 60 * 24 * 30,\n      path: \"/\"\n    });\n    res.setHeader(\"Set-Cookie\", serialised);\n    res.status(200).json({\n      message: \"Success!\"\n    });\n  } else {\n    res.json({\n      message: `Invalid credentials!${myAddress}}`\n    });\n  }\n}","map":{"version":3,"sources":["/Users/kimdawoon/jogakbo-nextjs/jogakbo-nextjs/src/pages/api/auth/login.js"],"names":["sign","serialize","secret","process","env","SECRET","req","res","myAddress","body","token","exp","Math","floor","Date","now","address","serialised","httpOnly","secure","sameSite","maxAge","path","setHeader","status","json","message"],"mappings":"AAAA,SAAQA,IAAR,QAAmB,cAAnB;AACA,SAAQC,SAAR,QAAwB,QAAxB;AAEA,MAAMC,MAAM,GAAGC,OAAO,CAACC,GAAR,CAAYC,MAA3B;AAEA,eAAe,gBAAgBC,GAAhB,EAAqBC,GAArB,EAA0B;AACvC,QAAM;AAACC,IAAAA;AAAD,MAAcF,GAAG,CAACG,IAAxB,CADuC,CAEvC;AACA;AACA;;AACA,MAAID,SAAS,KAAK,MAAlB,EAA0B;AACxB,UAAME,KAAK,GAAGV,IAAI,CAChB;AACEW,MAAAA,GAAG,EAAEC,IAAI,CAACC,KAAL,CAAWC,IAAI,CAACC,GAAL,KAAa,IAAxB,IAAgC,KAAK,EAAL,GAAU,EAAV,GAAe,EADtD;AAC0D;AACxDC,MAAAA,OAAO,EAAER;AAFX,KADgB,EAKhBN,MALgB,CAAlB;AAQA,UAAMe,UAAU,GAAGhB,SAAS,CAAC,YAAD,EAAeS,KAAf,EAAsB;AAChDQ,MAAAA,QAAQ,EAAE,IADsC;AAEhDC,MAAAA,MAAM,OAF0C;AAGhDC,MAAAA,QAAQ,EAAE,QAHsC;AAIhDC,MAAAA,MAAM,EAAE,KAAK,EAAL,GAAU,EAAV,GAAe,EAJyB;AAKhDC,MAAAA,IAAI,EAAE;AAL0C,KAAtB,CAA5B;AAQAf,IAAAA,GAAG,CAACgB,SAAJ,CAAc,YAAd,EAA4BN,UAA5B;AACAV,IAAAA,GAAG,CAACiB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,MAAAA,OAAO,EAAE;AAAV,KAArB;AACD,GAnBD,MAmBO;AACLnB,IAAAA,GAAG,CAACkB,IAAJ,CAAS;AAACC,MAAAA,OAAO,EAAG,uBAAsBlB,SAAU;AAA3C,KAAT;AACD;AACF","sourcesContent":["import {sign} from \"jsonwebtoken\";\nimport {serialize} from \"cookie\";\n\nconst secret = process.env.SECRET;\n\nexport default async function (req, res) {\n  const {myAddress} = req.body;\n  // Check in the database\n  // if a user with this username\n  // and password exists\n  if (myAddress !== \"0x00\") {\n    const token = sign(\n      {\n        exp: Math.floor(Date.now() / 1000) + 60 * 60 * 24 * 30, // 30 days\n        address: myAddress,\n      },\n      secret,\n    );\n\n    const serialised = serialize(\"OursiteJWT\", token, {\n      httpOnly: true,\n      secure: process.env.NODE_ENV !== \"development\",\n      sameSite: \"strict\",\n      maxAge: 60 * 60 * 24 * 30,\n      path: \"/\",\n    });\n\n    res.setHeader(\"Set-Cookie\", serialised);\n    res.status(200).json({message: \"Success!\"});\n  } else {\n    res.json({message: `Invalid credentials!${myAddress}}`});\n  }\n}\n"]},"metadata":{},"sourceType":"module"}