{"ast":null,"code":"import _regeneratorRuntime from \"/Users/kimdawoon/jogakbo-nextjs/jogakbo-nextjs/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/kimdawoon/jogakbo-nextjs/jogakbo-nextjs/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport Caver from \"caver-js\";\nexport var kaikas = /*#__PURE__*/function () {\n  var _s = $RefreshSig$();\n\n  var _ref = _asyncToGenerator(_s( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    var provider, _accounts, account, caver, balance, CheckUnlocked;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _s();\n\n            if (typeof window.klaytn !== \"undefined\") {\n              provider = window[\"klaytn\"];\n            }\n\n            _context2.prev = 2;\n            _context2.next = 5;\n            return window.klaytn.enable();\n\n          case 5:\n            _accounts = _context2.sent;\n            // 현재 kaikas에 선택된 공개키\n            account = _accounts[0]; // caver-js 연결\n\n            caver = new Caver(window.klaytn); // caver 함수 중 현재 공개키의 klay양을 리턴하는 함수\n\n            _context2.next = 10;\n            return caver.klay.getBalance(account);\n\n          case 10:\n            balance = _context2.sent;\n            return _context2.abrupt(\"return\", {\n              account: account,\n              balance: (balance / Math.pow(10, 18)).toString()\n            });\n\n          case 14:\n            _context2.prev = 14;\n            _context2.t0 = _context2[\"catch\"](2);\n            console.error(_context2.t0);\n\n          case 17:\n            useEffect(function () {\n              console.log(1);\n              window.klaytn.on(\"accountsChanged\", function (accounts) {\n                // kaikas에서 계정을 변경할 때 마다 내부의 함수가 실행됩니다.\n                console.log(accounts[0]);\n              });\n            }, [accounts]);\n\n            CheckUnlocked = /*#__PURE__*/function () {\n              var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n                return _regeneratorRuntime.wrap(function _callee$(_context) {\n                  while (1) {\n                    switch (_context.prev = _context.next) {\n                      case 0:\n                        _context.t0 = console;\n                        _context.next = 3;\n                        return window.klaytn._kaikas.isUnlocked();\n\n                      case 3:\n                        _context.t1 = _context.sent;\n\n                        _context.t0.log.call(_context.t0, _context.t1);\n\n                      case 5:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }\n                }, _callee);\n              }));\n\n              return function CheckUnlocked() {\n                return _ref2.apply(this, arguments);\n              };\n            }();\n\n          case 19:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[2, 14]]);\n  }), \"OD7bBpZva5O2jO+Puf00hKivP7c=\"));\n\n  return function kaikas() {\n    return _ref.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["/Users/kimdawoon/jogakbo-nextjs/jogakbo-nextjs/src/api/useKaikas.js"],"names":["Caver","kaikas","window","klaytn","provider","enable","accounts","account","caver","klay","getBalance","balance","toString","console","error","useEffect","log","on","CheckUnlocked","_kaikas","isUnlocked"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,UAAlB;AAEA,OAAO,IAAMC,MAAM;AAAA;;AAAA,yEAAG;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AACpB,gBAAI,OAAOC,MAAM,CAACC,MAAd,KAAyB,WAA7B,EAA0C;AAClCC,cAAAA,QADkC,GACvBF,MAAM,CAAC,QAAD,CADiB;AAEzC;;AAHmB;AAAA;AAAA,mBAOKA,MAAM,CAACC,MAAP,CAAcE,MAAd,EAPL;;AAAA;AAOZC,YAAAA,SAPY;AAQlB;AACMC,YAAAA,OATY,GASFD,SAAQ,CAAC,CAAD,CATN,EAWlB;;AACME,YAAAA,KAZY,GAYJ,IAAIR,KAAJ,CAAUE,MAAM,CAACC,MAAjB,CAZI,EAclB;;AAdkB;AAAA,mBAeIK,KAAK,CAACC,IAAN,CAAWC,UAAX,CAAsBH,OAAtB,CAfJ;;AAAA;AAeZI,YAAAA,OAfY;AAAA,8CAgBX;AAACJ,cAAAA,OAAO,EAAEA,OAAV;AAAmBI,cAAAA,OAAO,EAAE,CAACA,OAAO,YAAG,EAAH,EAAS,EAAT,CAAR,EAAqBC,QAArB;AAA5B,aAhBW;;AAAA;AAAA;AAAA;AAkBlBC,YAAAA,OAAO,CAACC,KAAR;;AAlBkB;AAqBpBC,YAAAA,SAAS,CAAC,YAAM;AACdF,cAAAA,OAAO,CAACG,GAAR,CAAY,CAAZ;AACAd,cAAAA,MAAM,CAACC,MAAP,CAAcc,EAAd,CAAiB,iBAAjB,EAAoC,UAAUX,QAAV,EAAoB;AACtD;AAEAO,gBAAAA,OAAO,CAACG,GAAR,CAAYV,QAAQ,CAAC,CAAD,CAApB;AACD,eAJD;AAKD,aAPQ,EAON,CAACA,QAAD,CAPM,CAAT;;AASMY,YAAAA,aA9Bc;AAAA,mFA8BE;AAAA;AAAA;AAAA;AAAA;AAAA,sCAEpBL,OAFoB;AAAA;AAAA,+BAEFX,MAAM,CAACC,MAAP,CAAcgB,OAAd,CAAsBC,UAAtB,EAFE;;AAAA;AAAA;;AAAA,oCAEZJ,GAFY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eA9BF;;AAAA,8BA8BdE,aA9Bc;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAANjB,MAAM;AAAA;AAAA;AAAA,GAAZ","sourcesContent":["import Caver from \"caver-js\";\n\nexport const kaikas = async () => {\n  if (typeof window.klaytn !== \"undefined\") {\n    const provider = window[\"klaytn\"];\n  }\n  try {\n    // kaikas와 상호작용해서 모든 공개키 획득\n    // accounts[0] 같이 배열로 접근하여 사용가능\n    const accounts = await window.klaytn.enable();\n    // 현재 kaikas에 선택된 공개키\n    const account = accounts[0];\n\n    // caver-js 연결\n    const caver = new Caver(window.klaytn);\n\n    // caver 함수 중 현재 공개키의 klay양을 리턴하는 함수\n    const balance = await caver.klay.getBalance(account);\n    return {account: account, balance: (balance / 10 ** 18).toString()};\n  } catch (error) {\n    console.error(error);\n  }\n\n  useEffect(() => {\n    console.log(1);\n    window.klaytn.on(\"accountsChanged\", function (accounts) {\n      // kaikas에서 계정을 변경할 때 마다 내부의 함수가 실행됩니다.\n\n      console.log(accounts[0]);\n    });\n  }, [accounts]);\n\n  const CheckUnlocked = async () => {\n    // 지갑이 연결되어있다면 true, 아니라면 false를 리턴합니다.\n    console.log(await window.klaytn._kaikas.isUnlocked());\n  };\n};\n"]},"metadata":{},"sourceType":"module"}