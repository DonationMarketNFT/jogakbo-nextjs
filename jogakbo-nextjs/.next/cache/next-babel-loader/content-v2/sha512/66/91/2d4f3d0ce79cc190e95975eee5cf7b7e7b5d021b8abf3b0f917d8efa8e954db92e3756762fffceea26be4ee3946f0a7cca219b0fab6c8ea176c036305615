{"ast":null,"code":"import { atom } from \"recoil\"; // interface Klaytn {\n//   on: (eventName: string, callback: () => void) => void;\n//   enable: () => Promise<Array<string>>;\n//   selectedAddress: string;\n//   networkVersion: number;\n//   publicConfigStore: Store;\n// }\n// interface State {\n//   isEnabled: boolean;\n//   isUnlocked: boolean;\n//   networkVersion: number;\n//   onboardingcomplete: boolean;\n// }\n// interface Store {\n//   subscribe: (callback: () => void) => void;\n//   getState: () => State;\n// }\n// declare global {\n//   interface Window {\n//     klaytn: any;\n//   }\n// }\n// let kly;\n// if (typeof window !== \"undefined\") {\n//   kly = window.klaytn;\n// }\n// const caverState = atom<any>({\n//   key: \"caver\",\n//   default: kly,\n// });\n\nvar showSignInModalState = atom({\n  key: \"signInKey\",\n  \"default\": false\n});\nvar showConnectWalletModalState = atom({\n  key: \"connectWalletKey\",\n  \"default\": false\n});\nvar showCategoryModalState = atom({\n  key: \"showCategoryModalState\",\n  \"default\": false\n});\nvar isLoginedState = atom({\n  key: \"loginKey\",\n  \"default\": false\n});\nvar myAddressState = atom({\n  key: \"myAddressKey\",\n  // default: \"0xD216a6beBdDECa9b862c1423b31CFA5188E5cB3C\",\n  \"default\": \"0x00\"\n});\nvar myBalanceState = atom({\n  key: \"myBalanceKey\",\n  \"default\": \"0\"\n});\nvar qrValueState = atom({\n  key: \"qrcodeKey\",\n  \"default\": \"DEFAULT\"\n});\nvar modalPropsState = atom({\n  key: \"modalPropsKey\",\n  \"default\": {\n    title: \"MODAL\",\n    onConfirm: function onConfirm() {}\n  }\n});\nvar subMenuState = atom({\n  key: \"subMenuState\",\n  \"default\": false\n});\nvar VerifyModalState = atom({\n  key: \"verifyModalState\",\n  \"default\": false\n});\nvar loginPlatformState = atom({\n  key: \"loginPlatformState\",\n  \"default\": \"None\"\n});\nexport { showSignInModalState, showConnectWalletModalState, showCategoryModalState, isLoginedState, myAddressState, myBalanceState, qrValueState, modalPropsState, subMenuState, VerifyModalState, loginPlatformState };","map":null,"metadata":{},"sourceType":"module"}