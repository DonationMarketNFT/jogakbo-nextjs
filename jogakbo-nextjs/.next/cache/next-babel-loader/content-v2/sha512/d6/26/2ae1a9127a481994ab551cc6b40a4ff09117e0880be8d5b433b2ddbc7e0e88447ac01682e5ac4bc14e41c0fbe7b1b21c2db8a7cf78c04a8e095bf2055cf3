{"ast":null,"code":"import axios from \"axios\";\nimport { login } from \"./Login\";\nconst BASE_PATH = \"http://localhost:3000/account-wc\";\n// 모든 데이터 조회\nexport const getAccounts = async () => {\n  const results = await axios.get(`${BASE_PATH}/user_all`);\n  return results.data;\n}; // 특정 데이터 조회\n\nexport const getAccount = async id => {\n  const results = await axios.get(`${BASE_PATH}/user/${id}`);\n  return results.data;\n}; // DB에 있는 주소라면 true, 없다면 false를 login에 저장\n\nexport const getUserAddress = async (addr, callback) => {\n  // const results =\n  await axios.get(`${BASE_PATH}/user/addr/${addr}`).then(res => {\n    if (res.data) {\n      console.log(`[Result] ${JSON.stringify(res.data.result)}`);\n      callback(res.data.id);\n    }\n  }); // return results;\n}; // 첫 지갑연결 시 DB에 유저정보 추가\n\nexport const postAccount = (_walletAddress, _walletKind, setMyAddress) => {\n  const data = {\n    walletAddress: _walletAddress,\n    walletKind: _walletKind,\n    nickName: `user${_walletAddress}`\n  };\n  axios.post(`${BASE_PATH}/create_user`, data).then(res => {\n    // setMyAddress(_walletAddress);\n    console.log(\"유저등록\");\n    login(_walletAddress, setMyAddress);\n  }).catch(e => {\n    console.log(e); // setMyAddress(_walletAddress);\n\n    console.log(\"로그인성공\");\n    login(_walletAddress, setMyAddress);\n  });\n}; // 닉네임을 nickname로 수정\n\nexport const patchNickname = (id, nickname) => {\n  axios.patch(`${BASE_PATH}/user/updatenickname/${id}`, {\n    nickName: nickname\n  }).then(res => {\n    alert(\"정상적으로 변경되었습니다 :)\");\n    location.reload();\n  }).catch(e => console.log(e));\n};\nexport const deleteAccount = id => {\n  axios.delete(`${BASE_PATH}/user/delete/${id}`).then(res => {\n    console.log(`${id}번째 유저삭제 성공`);\n  }).catch(e => console.log(e));\n};","map":{"version":3,"sources":["/Users/kimdawoon/jogakbo-nextjs/jogakbo-nextjs/src/api/accountWc.ts"],"names":["axios","login","BASE_PATH","getAccounts","results","get","data","getAccount","id","getUserAddress","addr","callback","then","res","console","log","JSON","stringify","result","postAccount","_walletAddress","_walletKind","setMyAddress","walletAddress","walletKind","nickName","post","catch","e","patchNickname","nickname","patch","alert","location","reload","deleteAccount","delete"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAAQC,KAAR,QAAoB,SAApB;AAEA,MAAMC,SAAS,GAAG,kCAAlB;AAQA;AACA,OAAO,MAAMC,WAAW,GAAG,YAAY;AACrC,QAAMC,OAAO,GAAG,MAAMJ,KAAK,CAACK,GAAN,CAAW,GAAEH,SAAU,WAAvB,CAAtB;AACA,SAAOE,OAAO,CAACE,IAAf;AACD,CAHM,C,CAKP;;AACA,OAAO,MAAMC,UAAU,GAAG,MAAOC,EAAP,IAAsB;AAC9C,QAAMJ,OAAO,GAAG,MAAMJ,KAAK,CAACK,GAAN,CAAW,GAAEH,SAAU,SAAQM,EAAG,EAAlC,CAAtB;AACA,SAAOJ,OAAO,CAACE,IAAf;AACD,CAHM,C,CAKP;;AACA,OAAO,MAAMG,cAAc,GAAG,OAAOC,IAAP,EAAqBC,QAArB,KAA4C;AACxE;AACA,QAAMX,KAAK,CAACK,GAAN,CAAW,GAAEH,SAAU,cAAaQ,IAAK,EAAzC,EAA4CE,IAA5C,CAAiDC,GAAG,IAAI;AAC5D,QAAIA,GAAG,CAACP,IAAR,EAAc;AACZQ,MAAAA,OAAO,CAACC,GAAR,CAAa,YAAWC,IAAI,CAACC,SAAL,CAAeJ,GAAG,CAACP,IAAJ,CAASY,MAAxB,CAAgC,EAAxD;AACAP,MAAAA,QAAQ,CAACE,GAAG,CAACP,IAAJ,CAASE,EAAV,CAAR;AACD;AACF,GALK,CAAN,CAFwE,CAQxE;AACD,CATM,C,CAWP;;AACA,OAAO,MAAMW,WAAW,GAAG,CACzBC,cADyB,EAEzBC,WAFyB,EAGzBC,YAHyB,KAItB;AACH,QAAMhB,IAAgB,GAAG;AACvBiB,IAAAA,aAAa,EAAEH,cADQ;AAEvBI,IAAAA,UAAU,EAAEH,WAFW;AAGvBI,IAAAA,QAAQ,EAAG,OAAML,cAAe;AAHT,GAAzB;AAKApB,EAAAA,KAAK,CACF0B,IADH,CACS,GAAExB,SAAU,cADrB,EACoCI,IADpC,EAEGM,IAFH,CAEQC,GAAG,IAAI;AACX;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACAd,IAAAA,KAAK,CAACmB,cAAD,EAAiBE,YAAjB,CAAL;AACD,GANH,EAOGK,KAPH,CAOSC,CAAC,IAAI;AACVd,IAAAA,OAAO,CAACC,GAAR,CAAYa,CAAZ,EADU,CAEV;;AACAd,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACAd,IAAAA,KAAK,CAACmB,cAAD,EAAiBE,YAAjB,CAAL;AACD,GAZH;AAaD,CAvBM,C,CAyBP;;AACA,OAAO,MAAMO,aAAa,GAAG,CAACrB,EAAD,EAAasB,QAAb,KAAkC;AAC7D9B,EAAAA,KAAK,CACF+B,KADH,CACU,GAAE7B,SAAU,wBAAuBM,EAAG,EADhD,EACmD;AAC/CiB,IAAAA,QAAQ,EAAEK;AADqC,GADnD,EAIGlB,IAJH,CAIQC,GAAG,IAAI;AACXmB,IAAAA,KAAK,CAAC,kBAAD,CAAL;AACAC,IAAAA,QAAQ,CAACC,MAAT;AACD,GAPH,EAQGP,KARH,CAQSC,CAAC,IAAId,OAAO,CAACC,GAAR,CAAYa,CAAZ,CARd;AASD,CAVM;AAYP,OAAO,MAAMO,aAAa,GAAI3B,EAAD,IAAgB;AAC3CR,EAAAA,KAAK,CACFoC,MADH,CACW,GAAElC,SAAU,gBAAeM,EAAG,EADzC,EAEGI,IAFH,CAEQC,GAAG,IAAI;AACXC,IAAAA,OAAO,CAACC,GAAR,CAAa,GAAEP,EAAG,YAAlB;AACD,GAJH,EAKGmB,KALH,CAKSC,CAAC,IAAId,OAAO,CAACC,GAAR,CAAYa,CAAZ,CALd;AAMD,CAPM","sourcesContent":["import axios from \"axios\";\nimport {fetchWrap} from \"../components/utils/axios\";\nimport {login} from \"./Login\";\n\nconst BASE_PATH = \"http://localhost:3000/account-wc\";\n\ninterface IAccountWc {\n  walletAddress: string;\n  walletKind: string;\n  nickName: string;\n}\n\n// 모든 데이터 조회\nexport const getAccounts = async () => {\n  const results = await axios.get(`${BASE_PATH}/user_all`);\n  return results.data;\n};\n\n// 특정 데이터 조회\nexport const getAccount = async (id: number) => {\n  const results = await axios.get(`${BASE_PATH}/user/${id}`);\n  return results.data;\n};\n\n// DB에 있는 주소라면 true, 없다면 false를 login에 저장\nexport const getUserAddress = async (addr: string, callback: Function) => {\n  // const results =\n  await axios.get(`${BASE_PATH}/user/addr/${addr}`).then(res => {\n    if (res.data) {\n      console.log(`[Result] ${JSON.stringify(res.data.result)}`);\n      callback(res.data.id);\n    }\n  });\n  // return results;\n};\n\n// 첫 지갑연결 시 DB에 유저정보 추가\nexport const postAccount = (\n  _walletAddress: string,\n  _walletKind: string,\n  setMyAddress: Function,\n) => {\n  const data: IAccountWc = {\n    walletAddress: _walletAddress,\n    walletKind: _walletKind,\n    nickName: `user${_walletAddress}`,\n  };\n  axios\n    .post(`${BASE_PATH}/create_user`, data)\n    .then(res => {\n      // setMyAddress(_walletAddress);\n      console.log(\"유저등록\");\n      login(_walletAddress, setMyAddress);\n    })\n    .catch(e => {\n      console.log(e);\n      // setMyAddress(_walletAddress);\n      console.log(\"로그인성공\");\n      login(_walletAddress, setMyAddress);\n    });\n};\n\n// 닉네임을 nickname로 수정\nexport const patchNickname = (id: number, nickname: string) => {\n  axios\n    .patch(`${BASE_PATH}/user/updatenickname/${id}`, {\n      nickName: nickname,\n    })\n    .then(res => {\n      alert(\"정상적으로 변경되었습니다 :)\");\n      location.reload();\n    })\n    .catch(e => console.log(e));\n};\n\nexport const deleteAccount = (id: number) => {\n  axios\n    .delete(`${BASE_PATH}/user/delete/${id}`)\n    .then(res => {\n      console.log(`${id}번째 유저삭제 성공`);\n    })\n    .catch(e => console.log(e));\n};\n"]},"metadata":{},"sourceType":"module"}