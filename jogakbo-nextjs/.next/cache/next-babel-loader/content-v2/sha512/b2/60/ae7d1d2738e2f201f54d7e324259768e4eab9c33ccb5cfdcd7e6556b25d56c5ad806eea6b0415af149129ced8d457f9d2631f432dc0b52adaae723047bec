{"ast":null,"code":"import Caver from \"caver-js\";\nimport { getAccount, getUserAddress, postAccount } from \"./accountWc\";\nexport const kaikas = async setMyAddress => {\n  if (typeof window.klaytn !== \"undefined\") {\n    const provider = window[\"klaytn\"]; // Kaikas user detected. You can now use the provider.\n  }\n\n  try {\n    const accounts = await window.klaytn.enable();\n    await postAccount(accounts[0], \"kaikas\", setMyAddress);\n    return accounts[0];\n  } catch (error) {\n    console.error(error);\n    await postAccount(accounts[0], \"kaikas\", setMyAddress);\n  }\n};\nexport const testKaikas = async () => {}; // useEffect(() => {\n//   console.log(1);\n//   window.klaytn.on(\"accountsChanged\", function (accounts) {\n//     // kaikas에서 계정을 변경할 때 마다 내부의 함수가 실행됩니다.\n//     console.log(accounts[0]);\n//   });\n// }, [accounts]);\n// export const CheckUnlocked = async () => {\n//   // 지갑이 연결되어있다면 true, 아니라면 false를 리턴합니다.\n//   console.log(await window.klaytn._kaikas.isUnlocked());\n// };","map":{"version":3,"sources":["/Users/kimdawoon/jogakbo-nextjs/jogakbo-nextjs/src/api/useKaikas.js"],"names":["Caver","getAccount","getUserAddress","postAccount","kaikas","setMyAddress","window","klaytn","provider","accounts","enable","error","console","testKaikas"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,UAAlB;AACA,SAAQC,UAAR,EAAoBC,cAApB,EAAoCC,WAApC,QAAsD,aAAtD;AAEA,OAAO,MAAMC,MAAM,GAAG,MAAMC,YAAN,IAAsB;AAC1C,MAAI,OAAOC,MAAM,CAACC,MAAd,KAAyB,WAA7B,EAA0C;AACxC,UAAMC,QAAQ,GAAGF,MAAM,CAAC,QAAD,CAAvB,CADwC,CAExC;AACD;;AACD,MAAI;AACF,UAAMG,QAAQ,GAAG,MAAMH,MAAM,CAACC,MAAP,CAAcG,MAAd,EAAvB;AACA,UAAMP,WAAW,CAACM,QAAQ,CAAC,CAAD,CAAT,EAAc,QAAd,EAAwBJ,YAAxB,CAAjB;AACA,WAAOI,QAAQ,CAAC,CAAD,CAAf;AACD,GAJD,CAIE,OAAOE,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACA,UAAMR,WAAW,CAACM,QAAQ,CAAC,CAAD,CAAT,EAAc,QAAd,EAAwBJ,YAAxB,CAAjB;AACD;AACF,CAbM;AAeP,OAAO,MAAMQ,UAAU,GAAG,YAAY,CAAE,CAAjC,C,CAEP;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA","sourcesContent":["import Caver from \"caver-js\";\nimport {getAccount, getUserAddress, postAccount} from \"./accountWc\";\n\nexport const kaikas = async setMyAddress => {\n  if (typeof window.klaytn !== \"undefined\") {\n    const provider = window[\"klaytn\"];\n    // Kaikas user detected. You can now use the provider.\n  }\n  try {\n    const accounts = await window.klaytn.enable();\n    await postAccount(accounts[0], \"kaikas\", setMyAddress);\n    return accounts[0];\n  } catch (error) {\n    console.error(error);\n    await postAccount(accounts[0], \"kaikas\", setMyAddress);\n  }\n};\n\nexport const testKaikas = async () => {};\n\n// useEffect(() => {\n//   console.log(1);\n//   window.klaytn.on(\"accountsChanged\", function (accounts) {\n//     // kaikas에서 계정을 변경할 때 마다 내부의 함수가 실행됩니다.\n\n//     console.log(accounts[0]);\n//   });\n// }, [accounts]);\n\n// export const CheckUnlocked = async () => {\n//   // 지갑이 연결되어있다면 true, 아니라면 false를 리턴합니다.\n//   console.log(await window.klaytn._kaikas.isUnlocked());\n// };\n"]},"metadata":{},"sourceType":"module"}