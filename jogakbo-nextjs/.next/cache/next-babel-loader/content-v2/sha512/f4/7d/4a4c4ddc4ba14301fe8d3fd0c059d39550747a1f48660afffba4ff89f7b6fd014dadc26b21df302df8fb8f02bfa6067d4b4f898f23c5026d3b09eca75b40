{"ast":null,"code":"import Caver from 'caver-js';\nexport const kaikas = async () => {\n  if (typeof window.klaytn !== 'undefined') {\n    const provider = window['klaytn'];\n  }\n\n  try {\n    // kaikas와 상호작용해서 모든 공개키 획득\n    // accounts[0] 같이 배열로 접근하여 사용가능\n    const accounts = await window.klaytn.enable(); // 현재 kaikas에 선택된 공개키\n\n    const account = window.klaytn.selectedAddress; // caver-js 연결\n\n    const caver = new Caver(window.klaytn); // caver 함수 중 현재 공개키의 klay양을 리턴하는 함수\n\n    const balance = await caver.klay.getBalance(account);\n    return {\n      account: account,\n      balance: (balance / 10 ** 18).toString()\n    };\n  } catch (error) {\n    console.error(error);\n  } // useEffect(() => {\n  //   window.klaytn.on(\"accountsChanged\", function (accounts) {\n  //     // kaikas에서 계정을 변경할 때 마다 내부의 함수가 실행됩니다.\n  //     console.log(\"hey\");\n  //   });\n  // });\n\n\n  const CheckUnlocked = async () => {\n    // 지갑이 연결되어있다면 true, 아니라면 false를 리턴합니다.\n    console.log(await window.klaytn._kaikas.isUnlocked());\n  };\n};","map":{"version":3,"sources":["/Users/kimdawoon/jogakbo-nextjs/jogakbo-nextjs/src/api/useKaikas.js"],"names":["Caver","kaikas","window","klaytn","provider","accounts","enable","account","selectedAddress","caver","balance","klay","getBalance","toString","error","console","CheckUnlocked","log","_kaikas","isUnlocked"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,UAAlB;AAEA,OAAO,MAAMC,MAAM,GAAG,YAAY;AAChC,MAAI,OAAOC,MAAM,CAACC,MAAd,KAAyB,WAA7B,EAA0C;AACxC,UAAMC,QAAQ,GAAGF,MAAM,CAAC,QAAD,CAAvB;AACD;;AACD,MAAI;AACF;AACA;AACA,UAAMG,QAAQ,GAAG,MAAMH,MAAM,CAACC,MAAP,CAAcG,MAAd,EAAvB,CAHE,CAIF;;AACA,UAAMC,OAAO,GAAGL,MAAM,CAACC,MAAP,CAAcK,eAA9B,CALE,CAOF;;AACA,UAAMC,KAAK,GAAG,IAAIT,KAAJ,CAAUE,MAAM,CAACC,MAAjB,CAAd,CARE,CAUF;;AACA,UAAMO,OAAO,GAAG,MAAMD,KAAK,CAACE,IAAN,CAAWC,UAAX,CAAsBL,OAAtB,CAAtB;AACA,WAAO;AAACA,MAAAA,OAAO,EAAEA,OAAV;AAAmBG,MAAAA,OAAO,EAAE,CAACA,OAAO,GAAG,MAAM,EAAjB,EAAqBG,QAArB;AAA5B,KAAP;AACD,GAbD,CAaE,OAAOC,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACD,GAnB+B,CAqBhC;AACA;AACA;AACA;AACA;AACA;;;AAEA,QAAME,aAAa,GAAG,YAAY;AAChC;AACAD,IAAAA,OAAO,CAACE,GAAR,CAAY,MAAMf,MAAM,CAACC,MAAP,CAAce,OAAd,CAAsBC,UAAtB,EAAlB;AACD,GAHD;AAID,CAhCM","sourcesContent":["import Caver from 'caver-js';\n\nexport const kaikas = async () => {\n  if (typeof window.klaytn !== 'undefined') {\n    const provider = window['klaytn'];\n  }\n  try {\n    // kaikas와 상호작용해서 모든 공개키 획득\n    // accounts[0] 같이 배열로 접근하여 사용가능\n    const accounts = await window.klaytn.enable();\n    // 현재 kaikas에 선택된 공개키\n    const account = window.klaytn.selectedAddress;\n\n    // caver-js 연결\n    const caver = new Caver(window.klaytn);\n\n    // caver 함수 중 현재 공개키의 klay양을 리턴하는 함수\n    const balance = await caver.klay.getBalance(account);\n    return {account: account, balance: (balance / 10 ** 18).toString()};\n  } catch (error) {\n    console.error(error);\n  }\n\n  // useEffect(() => {\n  //   window.klaytn.on(\"accountsChanged\", function (accounts) {\n  //     // kaikas에서 계정을 변경할 때 마다 내부의 함수가 실행됩니다.\n  //     console.log(\"hey\");\n  //   });\n  // });\n\n  const CheckUnlocked = async () => {\n    // 지갑이 연결되어있다면 true, 아니라면 false를 리턴합니다.\n    console.log(await window.klaytn._kaikas.isUnlocked());\n  };\n};\n"]},"metadata":{},"sourceType":"module"}