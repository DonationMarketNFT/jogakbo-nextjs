{"ast":null,"code":"import Caver from \"caver-js\";\nimport { ACCESS_KEY_ID, CHAIN_ID, JOGAKBO_CONTRACT_ADDRESS, SECRET_ACCRESS_KEY } from \"constants/constants.baobab\";\nimport { postAccount } from \"./accountWc\";\nimport { login, logout } from \"./Login\";\nimport JOGAKBOABI from \"../abi/JogakboABI.json\";\nexport const kaikas = async (myAddress, setMyAddress) => {\n  if (typeof window.klaytn !== \"undefined\") {\n    const provider = window[\"klaytn\"];\n  }\n\n  try {\n    const accounts = await window.klaytn.enable();\n    postAccount(accounts[0], \"kaikas\", setMyAddress);\n    return accounts[0];\n  } catch (error) {\n    postAccount(accounts[0], \"kaikas\", setMyAddress);\n  }\n};\nexport const testKaikas = async callback => {\n  await window.klaytn.on(\"accountsChanged\", function (accounts) {\n    console.log(\"계정바뀜\", accounts[0]);\n    login(accounts[0], callback);\n  });\n};\nexport const confirmKaikas = async () => {\n  const inUnlocked = await window.klaytn._kaikas.isUnlocked();\n\n  if (!inUnlocked) {\n    logout();\n  }\n\n  console.log(inUnlocked);\n}; // export const test1 = async () => {\n//   const results = await test.methods.createCampaign();\n// };\n// const caver = new Caver(JOGAKBOABI, JOGAKBO_CONTRACT_ADDRESS);\n// const caver = new Caver(window.klaytn);\n// const tx = {\n//   type: \"SMART_CONTRACT_EXECUTION\",\n//   from: sender.address,\n//   to: contractAddress,\n//   data: nftContract.methods\n//     .transferFrom(sender.address, receiver, tokenId)\n//     .encodeABI(),\n//   gas: \"300000\",\n//   value: 0,\n// };\n// caver.klay\n//   .sendTransaction({\n//     from: klaytn.selectedAddress,\n//     to: JOGAKBO_CONTRACT_ADDRESS,\n//     value: \"1000000000\",\n//   })\n//   .then(receipt => {});\n// export const sendTransaction = () => {\n//   caver.klay\n//     .sendTransaction({\n//       type: \"VALUE_TRANSFER\",\n//       from: klaytn.selectedAddress,\n//       to: \"0xa52c3f53f087b3445190adc0b038bd78d8110eda\",\n//       value: caver.utils.toPeb(\"1\", \"KLAY\"),\n//       gas: 80000000,\n//     })\n//     .once(\"transactionHash\", transactionHash => {\n//       console.log(\"txHash\", transactionHash);\n//     })\n//     .once(\"receipt\", receipt => {\n//       console.log(\"receipt\", receipt);\n//     })\n//     .once(\"error\", error => {\n//       console.log(\"error\", error);\n//     });\n// };","map":{"version":3,"sources":["/Users/kimdawoon/jogakbo-nextjs/jogakbo-nextjs/src/api/useKaikas.js"],"names":["Caver","ACCESS_KEY_ID","CHAIN_ID","JOGAKBO_CONTRACT_ADDRESS","SECRET_ACCRESS_KEY","postAccount","login","logout","JOGAKBOABI","kaikas","myAddress","setMyAddress","window","klaytn","provider","accounts","enable","error","testKaikas","callback","on","console","log","confirmKaikas","inUnlocked","_kaikas","isUnlocked"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,UAAlB;AACA,SACEC,aADF,EAEEC,QAFF,EAGEC,wBAHF,EAIEC,kBAJF,QAKO,4BALP;AAMA,SAAQC,WAAR,QAA0B,aAA1B;AACA,SAAQC,KAAR,EAAeC,MAAf,QAA4B,SAA5B;AACA,OAAOC,UAAP,MAAuB,wBAAvB;AAEA,OAAO,MAAMC,MAAM,GAAG,OAAOC,SAAP,EAAkBC,YAAlB,KAAmC;AACvD,MAAI,OAAOC,MAAM,CAACC,MAAd,KAAyB,WAA7B,EAA0C;AACxC,UAAMC,QAAQ,GAAGF,MAAM,CAAC,QAAD,CAAvB;AACD;;AACD,MAAI;AACF,UAAMG,QAAQ,GAAG,MAAMH,MAAM,CAACC,MAAP,CAAcG,MAAd,EAAvB;AACAX,IAAAA,WAAW,CAACU,QAAQ,CAAC,CAAD,CAAT,EAAc,QAAd,EAAwBJ,YAAxB,CAAX;AACA,WAAOI,QAAQ,CAAC,CAAD,CAAf;AACD,GAJD,CAIE,OAAOE,KAAP,EAAc;AACdZ,IAAAA,WAAW,CAACU,QAAQ,CAAC,CAAD,CAAT,EAAc,QAAd,EAAwBJ,YAAxB,CAAX;AACD;AACF,CAXM;AAaP,OAAO,MAAMO,UAAU,GAAG,MAAMC,QAAN,IAAkB;AAC1C,QAAMP,MAAM,CAACC,MAAP,CAAcO,EAAd,CAAiB,iBAAjB,EAAoC,UAAUL,QAAV,EAAoB;AAC5DM,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBP,QAAQ,CAAC,CAAD,CAA5B;AACAT,IAAAA,KAAK,CAACS,QAAQ,CAAC,CAAD,CAAT,EAAcI,QAAd,CAAL;AACD,GAHK,CAAN;AAID,CALM;AAOP,OAAO,MAAMI,aAAa,GAAG,YAAY;AACvC,QAAMC,UAAU,GAAG,MAAMZ,MAAM,CAACC,MAAP,CAAcY,OAAd,CAAsBC,UAAtB,EAAzB;;AACA,MAAI,CAACF,UAAL,EAAiB;AACfjB,IAAAA,MAAM;AACP;;AACDc,EAAAA,OAAO,CAACC,GAAR,CAAYE,UAAZ;AACD,CANM,C,CAQP;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import Caver from \"caver-js\";\nimport {\n  ACCESS_KEY_ID,\n  CHAIN_ID,\n  JOGAKBO_CONTRACT_ADDRESS,\n  SECRET_ACCRESS_KEY,\n} from \"constants/constants.baobab\";\nimport {postAccount} from \"./accountWc\";\nimport {login, logout} from \"./Login\";\nimport JOGAKBOABI from \"../abi/JogakboABI.json\";\n\nexport const kaikas = async (myAddress, setMyAddress) => {\n  if (typeof window.klaytn !== \"undefined\") {\n    const provider = window[\"klaytn\"];\n  }\n  try {\n    const accounts = await window.klaytn.enable();\n    postAccount(accounts[0], \"kaikas\", setMyAddress);\n    return accounts[0];\n  } catch (error) {\n    postAccount(accounts[0], \"kaikas\", setMyAddress);\n  }\n};\n\nexport const testKaikas = async callback => {\n  await window.klaytn.on(\"accountsChanged\", function (accounts) {\n    console.log(\"계정바뀜\", accounts[0]);\n    login(accounts[0], callback);\n  });\n};\n\nexport const confirmKaikas = async () => {\n  const inUnlocked = await window.klaytn._kaikas.isUnlocked();\n  if (!inUnlocked) {\n    logout();\n  }\n  console.log(inUnlocked);\n};\n\n// export const test1 = async () => {\n//   const results = await test.methods.createCampaign();\n// };\n\n// const caver = new Caver(JOGAKBOABI, JOGAKBO_CONTRACT_ADDRESS);\n// const caver = new Caver(window.klaytn);\n\n// const tx = {\n//   type: \"SMART_CONTRACT_EXECUTION\",\n//   from: sender.address,\n//   to: contractAddress,\n//   data: nftContract.methods\n//     .transferFrom(sender.address, receiver, tokenId)\n//     .encodeABI(),\n//   gas: \"300000\",\n//   value: 0,\n// };\n\n// caver.klay\n//   .sendTransaction({\n//     from: klaytn.selectedAddress,\n//     to: JOGAKBO_CONTRACT_ADDRESS,\n//     value: \"1000000000\",\n//   })\n//   .then(receipt => {});\n\n// export const sendTransaction = () => {\n//   caver.klay\n//     .sendTransaction({\n//       type: \"VALUE_TRANSFER\",\n//       from: klaytn.selectedAddress,\n//       to: \"0xa52c3f53f087b3445190adc0b038bd78d8110eda\",\n//       value: caver.utils.toPeb(\"1\", \"KLAY\"),\n//       gas: 80000000,\n//     })\n//     .once(\"transactionHash\", transactionHash => {\n//       console.log(\"txHash\", transactionHash);\n//     })\n//     .once(\"receipt\", receipt => {\n//       console.log(\"receipt\", receipt);\n//     })\n//     .once(\"error\", error => {\n//       console.log(\"error\", error);\n//     });\n// };\n"]},"metadata":{},"sourceType":"module"}