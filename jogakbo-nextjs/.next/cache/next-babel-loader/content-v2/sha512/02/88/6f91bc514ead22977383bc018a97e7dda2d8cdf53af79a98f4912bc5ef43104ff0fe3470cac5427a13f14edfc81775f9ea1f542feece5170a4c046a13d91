{"ast":null,"code":"import _regeneratorRuntime from \"/Users/kimdawoon/jogakbo-nextjs/jogakbo-nextjs/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/kimdawoon/jogakbo-nextjs/jogakbo-nextjs/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport axios from \"axios\";\nvar BASE_PATH = \"http://localhost:3000/account-wc\";\n// 모든 데이터 조회\nexport var getAccounts = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var results;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return axios.get(\"\".concat(BASE_PATH, \"/user_all\"));\n\n          case 2:\n            results = _context.sent;\n            return _context.abrupt(\"return\", results.data);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function getAccounts() {\n    return _ref.apply(this, arguments);\n  };\n}(); // 특정 데이터 조회\n\nexport var getAccount = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(id) {\n    var results;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return axios.get(\"\".concat(BASE_PATH, \"/user/\").concat(id));\n\n          case 2:\n            results = _context2.sent;\n            return _context2.abrupt(\"return\", results.data);\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function getAccount(_x) {\n    return _ref2.apply(this, arguments);\n  };\n}(); // DB에 있는 주소라면 true, 없다면 false를 login에 저장\n\nexport var getUserAddress = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(addr, callback) {\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return axios.get(\"\".concat(BASE_PATH, \"/user/addr/\").concat(addr)).then(function (res) {\n              if (res.data) {\n                console.log(\"[Result] \".concat(JSON.stringify(res.data.result)));\n                callback(res.data.id);\n              }\n            });\n\n          case 2:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n\n  return function getUserAddress(_x2, _x3) {\n    return _ref3.apply(this, arguments);\n  };\n}(); // 첫 지갑연결 시 DB에 유저정보 추가\n\nexport var postAccount = function postAccount(_walletAddress, _walletKind, setMyAddress) {\n  var data = {\n    walletAddress: _walletAddress,\n    walletKind: _walletKind,\n    nickName: \"user\".concat(_walletAddress)\n  };\n  axios.post(\"\".concat(BASE_PATH, \"/create_user\"), data).then(function (res) {\n    setMyAddress(_walletAddress);\n    console.log(\"유저등록\");\n  })[\"catch\"](function (e) {\n    setMyAddress(_walletAddress);\n    console.log(\"로그인성공\");\n  });\n}; // 닉네임을 nickname로 수정\n\nexport var patchNickname = function patchNickname(id, nickname) {\n  axios.patch(\"\".concat(BASE_PATH, \"/user/updatenickname/\").concat(id), {\n    nickName: nickname\n  }).then(function (res) {\n    alert(\"정상적으로 변경되었습니다 :)\");\n    location.reload();\n  })[\"catch\"](function (e) {\n    return console.log(e);\n  });\n};\nexport var deleteAccount = function deleteAccount(id) {\n  axios[\"delete\"](\"\".concat(BASE_PATH, \"/user/delete/\").concat(id)).then(function (res) {\n    console.log(\"\".concat(id, \"\\uBC88\\uC9F8 \\uC720\\uC800\\uC0AD\\uC81C \\uC131\\uACF5\"));\n  })[\"catch\"](function (e) {\n    return console.log(e);\n  });\n};","map":{"version":3,"sources":["/Users/kimdawoon/jogakbo-nextjs/jogakbo-nextjs/src/api/accountWc.ts"],"names":["axios","BASE_PATH","getAccounts","get","results","data","getAccount","id","getUserAddress","addr","callback","then","res","console","log","JSON","stringify","result","postAccount","_walletAddress","_walletKind","setMyAddress","walletAddress","walletKind","nickName","post","e","patchNickname","nickname","patch","alert","location","reload","deleteAccount"],"mappings":"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","sourcesContent":["import axios from \"axios\";\n\nconst BASE_PATH = \"http://localhost:3000/account-wc\";\n\ninterface IAccountWc {\n  walletAddress: string;\n  walletKind: string;\n  nickName: string;\n}\n\n// 모든 데이터 조회\nexport const getAccounts = async () => {\n  const results = await axios.get(`${BASE_PATH}/user_all`);\n  return results.data;\n};\n\n// 특정 데이터 조회\nexport const getAccount = async (id: number) => {\n  const results = await axios.get(`${BASE_PATH}/user/${id}`);\n  return results.data;\n};\n\n// DB에 있는 주소라면 true, 없다면 false를 login에 저장\nexport const getUserAddress = async (addr: string, callback: Function) => {\n  // const results =\n  await axios.get(`${BASE_PATH}/user/addr/${addr}`).then(res => {\n    if (res.data) {\n      console.log(`[Result] ${JSON.stringify(res.data.result)}`);\n      callback(res.data.id);\n    }\n  });\n  // return results;\n};\n\n// 첫 지갑연결 시 DB에 유저정보 추가\nexport const postAccount = (\n  _walletAddress: string,\n  _walletKind: string,\n  setMyAddress: Function,\n) => {\n  const data: IAccountWc = {\n    walletAddress: _walletAddress,\n    walletKind: _walletKind,\n    nickName: `user${_walletAddress}`,\n  };\n  axios\n    .post(`${BASE_PATH}/create_user`, data)\n    .then(res => {\n      setMyAddress(_walletAddress);\n      console.log(\"유저등록\");\n    })\n    .catch(e => {\n      setMyAddress(_walletAddress);\n      console.log(\"로그인성공\");\n    });\n};\n\n// 닉네임을 nickname로 수정\nexport const patchNickname = (id: number, nickname: string) => {\n  axios\n    .patch(`${BASE_PATH}/user/updatenickname/${id}`, {\n      nickName: nickname,\n    })\n    .then(res => {\n      alert(\"정상적으로 변경되었습니다 :)\");\n      location.reload();\n    })\n    .catch(e => console.log(e));\n};\n\nexport const deleteAccount = (id: number) => {\n  axios\n    .delete(`${BASE_PATH}/user/delete/${id}`)\n    .then(res => {\n      console.log(`${id}번째 유저삭제 성공`);\n    })\n    .catch(e => console.log(e));\n};\n"]},"metadata":{},"sourceType":"module"}