{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/kimdawoon/jogakbo-nextjs/jogakbo-nextjs/src/components/OAuth/Google.js\";\nimport GoogleLogin from \"react-google-login\";\nimport { useRecoilState } from \"recoil\";\nimport styled from \"styled-components\";\nimport { isLoginedState, loginPlatformState, showSignInModalState } from \"../../../atom\";\nimport { refreshTokenSetup } from \"../utils/refreshTokenSetup\";\nimport axios from \"axios\";\nconst Container = /*#__PURE__*/styled.div.withConfig({\n  displayName: \"Google__Container\",\n  componentId: \"sc-1p146o8-0\"\n})([\"display:flex;align-items:center;margin:10px 0;padding:0 15px;width:300px;height:45px;background:#f8f8f8;border-radius:5px;box-shadow:0 1px 2px 0 rgb(0 0 0 / 20%);cursor:pointer;\"]);\nconst Logo = /*#__PURE__*/styled.img.withConfig({\n  displayName: \"Google__Logo\",\n  componentId: \"sc-1p146o8-1\"\n})([\"width:36px;\"]);\nconst Text = /*#__PURE__*/styled.h5.withConfig({\n  displayName: \"Google__Text\",\n  componentId: \"sc-1p146o8-2\"\n})([\"width:100%;text-align:center;\"]);\nconst clientId = \"991698652827-vu3q9s8470ko9tu9sl342j69rn7ckpl9.apps.googleusercontent.com\";\nconst PLATFORM_NAME = \"GOOGLE\";\n\nconst Google = () => {\n  const [showSignInModal, setShowSignInModal] = useRecoilState(showSignInModalState);\n  const [isLogined, setIsLogined] = useRecoilState(isLoginedState);\n  const [loginPlatform, setLoginPlatform] = useRecoilState(loginPlatformState);\n\n  async function findEmail(email) {\n    console.log(email);\n\n    try {\n      const response = await axios.get(`http://localhost:3000/account/user/${email}`);\n      console.log(response);\n      return response;\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  const onSuccess = res => {\n    refreshTokenSetup(res); //access_token\n\n    console.log(\"[Login Success] res: \", res);\n    console.log(\"[Login Success] currentUser: \", res.profileObj);\n    console.log(\"닉네임\");\n    console.log(res.profileObj.name);\n    console.log(\"email\");\n    console.log(res.profileObj.email);\n    const response = findEmail(res.profileObj.email); //console.log(response);\n\n    setIsLogined(true);\n    setLoginPlatform(PLATFORM_NAME); // 모달만 닫음\n\n    setShowSignInModal(false); // res.profiledObj.googleId 이용해서 유저 id로 사용\n    // 구글에서 id 값을 줬다면, id 주인이 맞다는 것이므로 유저 인증가능\n  };\n\n  const onFailure = res => {\n    console.log(\"[Login Failed] res: \", res);\n  };\n\n  return /*#__PURE__*/_jsxDEV(GoogleLogin, {\n    clientId: clientId,\n    buttonText: \"Login\",\n    onSuccess: onSuccess,\n    onFailure: onFailure,\n    cookiePolicy: \"single_host_origin\",\n    isSignedIn: true,\n    render: props => /*#__PURE__*/_jsxDEV(Container, {\n      onClick: props.onClick,\n      disabled: props.disabled,\n      children: [/*#__PURE__*/_jsxDEV(Logo, {\n        src: \"oauth/google.svg\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Text, {\n        children: \"\\uAD6C\\uAE00 \\uB85C\\uADF8\\uC778\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n};\n\nexport default Google;","map":{"version":3,"sources":["/Users/kimdawoon/jogakbo-nextjs/jogakbo-nextjs/src/components/OAuth/Google.js"],"names":["GoogleLogin","useRecoilState","styled","isLoginedState","loginPlatformState","showSignInModalState","refreshTokenSetup","axios","Container","div","Logo","img","Text","h5","clientId","PLATFORM_NAME","Google","showSignInModal","setShowSignInModal","isLogined","setIsLogined","loginPlatform","setLoginPlatform","findEmail","email","console","log","response","get","err","onSuccess","res","profileObj","name","onFailure","props","onClick","disabled"],"mappings":"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","sourcesContent":["import GoogleLogin from \"react-google-login\";\nimport {useRecoilState} from \"recoil\";\nimport styled from \"styled-components\";\nimport {\n  isLoginedState,\n  loginPlatformState,\n  showSignInModalState,\n} from \"../../../atom\";\nimport {refreshTokenSetup} from \"../utils/refreshTokenSetup\";\nimport axios from \"axios\";\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n  margin: 10px 0;\n  padding: 0 15px;\n  width: 300px;\n  height: 45px;\n  background: #f8f8f8;\n  border-radius: 5px;\n  box-shadow: 0 1px 2px 0 rgb(0 0 0 / 20%);\n  cursor: pointer;\n`;\n\nconst Logo = styled.img`\n  width: 36px;\n`;\n\nconst Text = styled.h5`\n  width: 100%;\n  text-align: center;\n`;\n\nconst clientId =\n  \"991698652827-vu3q9s8470ko9tu9sl342j69rn7ckpl9.apps.googleusercontent.com\";\n\nconst PLATFORM_NAME = \"GOOGLE\";\n\nconst Google = () => {\n  const [showSignInModal, setShowSignInModal] =\n    useRecoilState(showSignInModalState);\n  const [isLogined, setIsLogined] = useRecoilState(isLoginedState);\n  const [loginPlatform, setLoginPlatform] = useRecoilState(loginPlatformState);\n\n  async function findEmail(email) {\n    console.log(email);\n    try {\n      const response = await axios.get(\n        `http://localhost:3000/account/user/${email}`,\n      );\n      console.log(response);\n      return response;\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  const onSuccess = res => {\n    refreshTokenSetup(res);\n    //access_token\n    console.log(\"[Login Success] res: \", res);\n    console.log(\"[Login Success] currentUser: \", res.profileObj);\n    console.log(\"닉네임\");\n    console.log(res.profileObj.name);\n    console.log(\"email\");\n    console.log(res.profileObj.email);\n\n    const response = findEmail(res.profileObj.email);\n    //console.log(response);\n\n    setIsLogined(true);\n    setLoginPlatform(PLATFORM_NAME);\n    // 모달만 닫음\n    setShowSignInModal(false);\n    // res.profiledObj.googleId 이용해서 유저 id로 사용\n    // 구글에서 id 값을 줬다면, id 주인이 맞다는 것이므로 유저 인증가능\n  };\n\n  const onFailure = res => {\n    console.log(\"[Login Failed] res: \", res);\n  };\n\n  return (\n    <GoogleLogin\n      clientId={clientId}\n      buttonText=\"Login\"\n      onSuccess={onSuccess}\n      onFailure={onFailure}\n      cookiePolicy={\"single_host_origin\"}\n      isSignedIn={true}\n      render={props => (\n        <Container onClick={props.onClick} disabled={props.disabled}>\n          <Logo src=\"oauth/google.svg\" />\n          <Text>구글 로그인</Text>\n        </Container>\n      )}\n    />\n  );\n};\n\nexport default Google;\n"]},"metadata":{},"sourceType":"module"}