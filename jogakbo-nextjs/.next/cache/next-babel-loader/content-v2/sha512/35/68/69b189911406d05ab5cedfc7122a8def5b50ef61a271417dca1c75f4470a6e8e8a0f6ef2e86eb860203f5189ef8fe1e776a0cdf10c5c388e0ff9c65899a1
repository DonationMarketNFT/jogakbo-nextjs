{"ast":null,"code":"import axios from \"axios\";\nconst BASE_PATH = \"http://localhost:3000/campaigns\";\n// 모든 데이터 조회\nexport const getCampaigns = async setPosts => {\n  const results = await axios.get(`${BASE_PATH}/campaign_all`);\n  setPosts(results.data);\n}; // 캠페인 생성하기를 통한 데이터 추가\n\nexport const postCampaign = (_name, _description, _targetAmount, _category) => {\n  const data = {\n    name: _name,\n    description: _description,\n    targetAmount: Number(_targetAmount),\n    currentAmount: 0,\n    fundingStatus: true,\n    refundStatus: false,\n    category: _category\n  };\n  axios.post(`${BASE_PATH}/create_campaign`, data).then(res => alert(\"정상적으로 제출되었습니다 :)\")).catch(e => console.log(e));\n}; // funding 중인 캠페인만 출력\n\nexport const getFunding = async setAllData => {\n  const results = await axios.get(`${BASE_PATH}/campaign/Onfunding`);\n  setAllData(results.data);\n}; // refunding 중인 캠페인만 출력\n\nexport const getRefunding = async setAllData => {\n  const results = await axios.get(`${BASE_PATH}/campaign/OnRefund`);\n  setAllData(results.data);\n};","map":{"version":3,"sources":["/Users/kimdawoon/jogakbo-nextjs/jogakbo-nextjs/src/api/campaigns.ts"],"names":["axios","BASE_PATH","getCampaigns","setPosts","results","get","data","postCampaign","_name","_description","_targetAmount","_category","name","description","targetAmount","Number","currentAmount","fundingStatus","refundStatus","category","post","then","res","alert","catch","e","console","log","getFunding","setAllData","getRefunding"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,MAAMC,SAAS,GAAG,iCAAlB;AAYA;AACA,OAAO,MAAMC,YAAY,GAAG,MAAOC,QAAP,IAA8B;AACxD,QAAMC,OAAO,GAAG,MAAMJ,KAAK,CAACK,GAAN,CAAW,GAAEJ,SAAU,eAAvB,CAAtB;AACAE,EAAAA,QAAQ,CAACC,OAAO,CAACE,IAAT,CAAR;AACD,CAHM,C,CAKP;;AACA,OAAO,MAAMC,YAAY,GAAG,CAC1BC,KAD0B,EAE1BC,YAF0B,EAG1BC,aAH0B,EAI1BC,SAJ0B,KAKvB;AACH,QAAML,IAAgB,GAAG;AACvBM,IAAAA,IAAI,EAAEJ,KADiB;AAEvBK,IAAAA,WAAW,EAAEJ,YAFU;AAGvBK,IAAAA,YAAY,EAAEC,MAAM,CAACL,aAAD,CAHG;AAIvBM,IAAAA,aAAa,EAAE,CAJQ;AAKvBC,IAAAA,aAAa,EAAE,IALQ;AAMvBC,IAAAA,YAAY,EAAE,KANS;AAOvBC,IAAAA,QAAQ,EAAER;AAPa,GAAzB;AASAX,EAAAA,KAAK,CACFoB,IADH,CACS,GAAEnB,SAAU,kBADrB,EACwCK,IADxC,EAEGe,IAFH,CAEQC,GAAG,IAAIC,KAAK,CAAC,kBAAD,CAFpB,EAGGC,KAHH,CAGSC,CAAC,IAAIC,OAAO,CAACC,GAAR,CAAYF,CAAZ,CAHd;AAID,CAnBM,C,CAqBP;;AACA,OAAO,MAAMG,UAAU,GAAG,MAAOC,UAAP,IAAgC;AACxD,QAAMzB,OAAO,GAAG,MAAMJ,KAAK,CAACK,GAAN,CAAW,GAAEJ,SAAU,qBAAvB,CAAtB;AACA4B,EAAAA,UAAU,CAACzB,OAAO,CAACE,IAAT,CAAV;AACD,CAHM,C,CAKP;;AACA,OAAO,MAAMwB,YAAY,GAAG,MAAOD,UAAP,IAAgC;AAC1D,QAAMzB,OAAO,GAAG,MAAMJ,KAAK,CAACK,GAAN,CAAW,GAAEJ,SAAU,oBAAvB,CAAtB;AACA4B,EAAAA,UAAU,CAACzB,OAAO,CAACE,IAAT,CAAV;AACD,CAHM","sourcesContent":["import axios from \"axios\";\n\nconst BASE_PATH = \"http://localhost:3000/campaigns\";\n\ninterface ICampaigns {\n  name: string;\n  description: string;\n  targetAmount: number;\n  currentAmount: number;\n  fundingStatus: boolean;\n  refundStatus: boolean;\n  category: string;\n}\n\n// 모든 데이터 조회\nexport const getCampaigns = async (setPosts: Function) => {\n  const results = await axios.get(`${BASE_PATH}/campaign_all`);\n  setPosts(results.data);\n};\n\n// 캠페인 생성하기를 통한 데이터 추가\nexport const postCampaign = (\n  _name: string,\n  _description: string,\n  _targetAmount: number,\n  _category: string,\n) => {\n  const data: ICampaigns = {\n    name: _name,\n    description: _description,\n    targetAmount: Number(_targetAmount),\n    currentAmount: 0,\n    fundingStatus: true,\n    refundStatus: false,\n    category: _category,\n  };\n  axios\n    .post(`${BASE_PATH}/create_campaign`, data)\n    .then(res => alert(\"정상적으로 제출되었습니다 :)\"))\n    .catch(e => console.log(e));\n};\n\n// funding 중인 캠페인만 출력\nexport const getFunding = async (setAllData: Function) => {\n  const results = await axios.get(`${BASE_PATH}/campaign/Onfunding`);\n  setAllData(results.data);\n};\n\n// refunding 중인 캠페인만 출력\nexport const getRefunding = async (setAllData: Function) => {\n  const results = await axios.get(`${BASE_PATH}/campaign/OnRefund`);\n  setAllData(results.data);\n};\n"]},"metadata":{},"sourceType":"module"}