{"ast":null,"code":"import _regeneratorRuntime from \"/Users/kimdawoon/jogakbo-nextjs/jogakbo-nextjs/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/kimdawoon/jogakbo-nextjs/jogakbo-nextjs/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport Caver from \"caver-js\";\nimport { ACCESS_KEY_ID, CHAIN_ID, JOGAKBO_CONTRACT_ADDRESS, NFT_CONTRACT_ADDRESS, SECRET_ACCRESS_KEY } from \"../constants/constants.baobab\";\nimport JOGAKBOABI from \"../abi/JogakboABI.json\";\nimport NFTABI from \"../abi/NftABI.json\";\nvar option = {\n  headers: [{\n    name: \"Authorization\",\n    value: \"Basic \" + Buffer.from(ACCESS_KEY_ID + \":\" + SECRET_ACCRESS_KEY).toString(\"base64\")\n  }, {\n    name: \"x-chain-id\",\n    value: CHAIN_ID\n  }]\n};\nvar caver = new Caver(new Caver.providers.HttpProvider( // \"https://node-api.klaytnapi.com/v1/klaytn\",\n\"https://api.baobab.klaytn.net:8651/\", option));\nvar JogakboContract = new caver.contract(JOGAKBOABI, JOGAKBO_CONTRACT_ADDRESS);\nvar NFTContract = new caver.contract(NFTABI, NFT_CONTRACT_ADDRESS);\nexport var testOwnTokenId = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(address) {\n    var ids;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return JogakboContract.methods.tokenIds(address).call();\n\n          case 2:\n            ids = _context.sent;\n            return _context.abrupt(\"return\", ids);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function testOwnTokenId(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var testTokenId2Description = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(id) {\n    var des;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return JogakboContract.methods.tokenDescription(id).call();\n\n          case 2:\n            des = _context2.sent;\n            return _context2.abrupt(\"return\", des);\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function testTokenId2Description(_x2) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var testTokenId2Name = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(id) {\n    var des;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return JogakboContract.methods.tokenName(id).call();\n\n          case 2:\n            des = _context3.sent;\n            return _context3.abrupt(\"return\", des);\n\n          case 4:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n\n  return function testTokenId2Name(_x3) {\n    return _ref3.apply(this, arguments);\n  };\n}();\nexport var testCampaignList = /*#__PURE__*/function () {\n  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n    var Number, lists, i, list;\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.next = 2;\n            return JogakboContract.methods.CampaignNumber().call();\n\n          case 2:\n            Number = _context4.sent;\n            lists = [];\n            i = 0;\n\n          case 5:\n            if (!(i < Number)) {\n              _context4.next = 13;\n              break;\n            }\n\n            _context4.next = 8;\n            return JogakboContract.methods.campaignList([i]).call();\n\n          case 8:\n            list = _context4.sent;\n            lists.push(list);\n\n          case 10:\n            i++;\n            _context4.next = 5;\n            break;\n\n          case 13:\n            return _context4.abrupt(\"return\", lists);\n\n          case 14:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n\n  return function testCampaignList() {\n    return _ref4.apply(this, arguments);\n  };\n}();\nexport var testCampaignNumber = /*#__PURE__*/function () {\n  var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n    var Number;\n    return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            _context5.next = 2;\n            return JogakboContract.methods.CampaignNumber().call();\n\n          case 2:\n            Number = _context5.sent;\n            console.log(\"number:\".concat(Number));\n            return _context5.abrupt(\"return\", Number);\n\n          case 5:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5);\n  }));\n\n  return function testCampaignNumber() {\n    return _ref5.apply(this, arguments);\n  };\n}(); // klip 잔고 조회시 메인넷 chain_id 필요\n\nexport var getBalance = function getBalance(address) {\n  return caver.rpc.klay.getBalance(address).then(function (response) {\n    var balance = caver.utils.convertFromPeb(caver.utils.hexToNumberString(response), \"KLAY\");\n    return balance;\n  });\n};","map":{"version":3,"sources":["/Users/kimdawoon/jogakbo-nextjs/jogakbo-nextjs/src/api/UseCaver.ts"],"names":["Caver","ACCESS_KEY_ID","CHAIN_ID","JOGAKBO_CONTRACT_ADDRESS","NFT_CONTRACT_ADDRESS","SECRET_ACCRESS_KEY","JOGAKBOABI","NFTABI","option","headers","name","value","Buffer","from","toString","caver","providers","HttpProvider","JogakboContract","contract","NFTContract","testOwnTokenId","address","methods","tokenIds","call","ids","testTokenId2Description","id","tokenDescription","des","testTokenId2Name","tokenName","testCampaignList","CampaignNumber","Number","lists","i","campaignList","list","push","testCampaignNumber","console","log","getBalance","rpc","klay","then","response","balance","utils","convertFromPeb","hexToNumberString"],"mappings":"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","sourcesContent":["import Caver, {AbiItem} from \"caver-js\";\nimport {\n  ACCESS_KEY_ID,\n  CHAIN_ID,\n  JOGAKBO_CONTRACT_ADDRESS,\n  NFT_CONTRACT_ADDRESS,\n  SECRET_ACCRESS_KEY,\n} from \"../constants/constants.baobab\";\nimport JOGAKBOABI from \"../abi/JogakboABI.json\";\nimport NFTABI from \"../abi/NftABI.json\";\n\nconst option = {\n  headers: [\n    {\n      name: \"Authorization\",\n      value:\n        \"Basic \" +\n        Buffer.from(ACCESS_KEY_ID + \":\" + SECRET_ACCRESS_KEY).toString(\n          \"base64\",\n        ),\n    },\n    {\n      name: \"x-chain-id\",\n      value: CHAIN_ID,\n    },\n  ],\n};\n\nconst caver = new Caver(\n  new Caver.providers.HttpProvider(\n    // \"https://node-api.klaytnapi.com/v1/klaytn\",\n    \"https://api.baobab.klaytn.net:8651/\",\n    option,\n  ),\n);\n\nconst JogakboContract = new caver.contract(\n  JOGAKBOABI as AbiItem[],\n  JOGAKBO_CONTRACT_ADDRESS,\n);\n\nconst NFTContract = new caver.contract(\n  NFTABI as AbiItem[],\n  NFT_CONTRACT_ADDRESS,\n);\n\nexport const testOwnTokenId = async (address: string) => {\n  const ids = await JogakboContract.methods.tokenIds(address).call();\n  return ids;\n};\n\nexport const testTokenId2Description = async (id: number) => {\n  const des = await JogakboContract.methods.tokenDescription(id).call();\n  return des;\n};\n\nexport const testTokenId2Name = async (id: number) => {\n  const des = await JogakboContract.methods.tokenName(id).call();\n  return des;\n};\n\nexport const testCampaignList = async () => {\n  const Number = await JogakboContract.methods.CampaignNumber().call();\n\n  const lists = [];\n  for (let i = 0; i < Number; i++) {\n    const list = await JogakboContract.methods.campaignList([i]).call();\n    lists.push(list);\n  }\n  return lists;\n};\n\nexport const testCampaignNumber = async () => {\n  const Number = await JogakboContract.methods.CampaignNumber().call();\n  console.log(`number:${Number}`);\n  return Number;\n};\n\n// klip 잔고 조회시 메인넷 chain_id 필요\nexport const getBalance = (address: string) => {\n  return caver.rpc.klay.getBalance(address).then(response => {\n    const balance = caver.utils.convertFromPeb(\n      caver.utils.hexToNumberString(response),\n      \"KLAY\",\n    );\n    return balance;\n  });\n};\n"]},"metadata":{},"sourceType":"module"}