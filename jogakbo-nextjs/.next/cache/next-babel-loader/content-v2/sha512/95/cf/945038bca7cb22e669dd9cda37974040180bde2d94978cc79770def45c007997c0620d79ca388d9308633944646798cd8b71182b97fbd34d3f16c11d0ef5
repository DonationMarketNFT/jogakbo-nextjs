{"ast":null,"code":"import _regeneratorRuntime from \"/Users/kimdawoon/jogakbo-nextjs/jogakbo-nextjs/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/kimdawoon/jogakbo-nextjs/jogakbo-nextjs/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport axios from \"axios\";\nvar BASE_PATH = \"http://localhost:3000/campaigns\";\n// 모든 데이터 조회\nexport var getCampaigns = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(setPosts) {\n    var results;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return axios.get(\"\".concat(BASE_PATH, \"/campaign_all\"));\n\n          case 2:\n            results = _context.sent;\n            setPosts(results.data);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function getCampaigns(_x) {\n    return _ref.apply(this, arguments);\n  };\n}(); // 캠페인 생성하기를 통한 데이터 추가\n\nexport var postCampaign = function postCampaign(_name, _description, _targetAmount, _category) {\n  var data = {\n    name: _name,\n    description: _description,\n    targetAmount: Number(_targetAmount),\n    currentAmount: 0,\n    fundingStatus: true,\n    refundStatus: false,\n    category: _category\n  };\n  axios.post(\"\".concat(BASE_PATH, \"/create_campaign\"), data).then(function (res) {\n    return alert(\"정상적으로 제출되었습니다 :)\");\n  })[\"catch\"](function (e) {\n    return console.log(e);\n  });\n}; // funding 중인 캠페인만 출력\n\nexport var getFunding = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(setAllData) {\n    var results;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return axios.get(\"\".concat(BASE_PATH, \"/campaign/Onfunding\"));\n\n          case 2:\n            results = _context2.sent;\n            setAllData(results.data);\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function getFunding(_x2) {\n    return _ref2.apply(this, arguments);\n  };\n}(); // refunding 중인 캠페인만 출력\n\nexport var getRefunding = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(setAllData) {\n    var results;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return axios.get(\"\".concat(BASE_PATH, \"/campaign/OnRefund\"));\n\n          case 2:\n            results = _context3.sent;\n            setAllData(results.data);\n\n          case 4:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n\n  return function getRefunding(_x3) {\n    return _ref3.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["/Users/kimdawoon/jogakbo-nextjs/jogakbo-nextjs/src/api/campaigns.ts"],"names":["axios","BASE_PATH","getCampaigns","setPosts","get","results","data","postCampaign","_name","_description","_targetAmount","_category","name","description","targetAmount","Number","currentAmount","fundingStatus","refundStatus","category","post","then","res","alert","e","console","log","getFunding","setAllData","getRefunding"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,IAAMC,SAAS,GAAG,iCAAlB;AAYA;AACA,OAAO,IAAMC,YAAY;AAAA,sEAAG,iBAAOC,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACJH,KAAK,CAACI,GAAN,WAAaH,SAAb,mBADI;;AAAA;AACpBI,YAAAA,OADoB;AAE1BF,YAAAA,QAAQ,CAACE,OAAO,CAACC,IAAT,CAAR;;AAF0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAZJ,YAAY;AAAA;AAAA;AAAA,GAAlB,C,CAKP;;AACA,OAAO,IAAMK,YAAY,GAAG,SAAfA,YAAe,CAC1BC,KAD0B,EAE1BC,YAF0B,EAG1BC,aAH0B,EAI1BC,SAJ0B,EAKvB;AACH,MAAML,IAAgB,GAAG;AACvBM,IAAAA,IAAI,EAAEJ,KADiB;AAEvBK,IAAAA,WAAW,EAAEJ,YAFU;AAGvBK,IAAAA,YAAY,EAAEC,MAAM,CAACL,aAAD,CAHG;AAIvBM,IAAAA,aAAa,EAAE,CAJQ;AAKvBC,IAAAA,aAAa,EAAE,IALQ;AAMvBC,IAAAA,YAAY,EAAE,KANS;AAOvBC,IAAAA,QAAQ,EAAER;AAPa,GAAzB;AASAX,EAAAA,KAAK,CACFoB,IADH,WACWnB,SADX,uBACwCK,IADxC,EAEGe,IAFH,CAEQ,UAAAC,GAAG;AAAA,WAAIC,KAAK,CAAC,kBAAD,CAAT;AAAA,GAFX,WAGS,UAAAC,CAAC;AAAA,WAAIC,OAAO,CAACC,GAAR,CAAYF,CAAZ,CAAJ;AAAA,GAHV;AAID,CAnBM,C,CAqBP;;AACA,OAAO,IAAMG,UAAU;AAAA,uEAAG,kBAAOC,UAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACF5B,KAAK,CAACI,GAAN,WAAaH,SAAb,yBADE;;AAAA;AAClBI,YAAAA,OADkB;AAExBuB,YAAAA,UAAU,CAACvB,OAAO,CAACC,IAAT,CAAV;;AAFwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAVqB,UAAU;AAAA;AAAA;AAAA,GAAhB,C,CAKP;;AACA,OAAO,IAAME,YAAY;AAAA,uEAAG,kBAAOD,UAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACJ5B,KAAK,CAACI,GAAN,WAAaH,SAAb,wBADI;;AAAA;AACpBI,YAAAA,OADoB;AAE1BuB,YAAAA,UAAU,CAACvB,OAAO,CAACC,IAAT,CAAV;;AAF0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAZuB,YAAY;AAAA;AAAA;AAAA,GAAlB","sourcesContent":["import axios from \"axios\";\n\nconst BASE_PATH = \"http://localhost:3000/campaigns\";\n\ninterface ICampaigns {\n  name: string;\n  description: string;\n  targetAmount: number;\n  currentAmount: number;\n  fundingStatus: boolean;\n  refundStatus: boolean;\n  category: string;\n}\n\n// 모든 데이터 조회\nexport const getCampaigns = async (setPosts: Function) => {\n  const results = await axios.get(`${BASE_PATH}/campaign_all`);\n  setPosts(results.data);\n};\n\n// 캠페인 생성하기를 통한 데이터 추가\nexport const postCampaign = (\n  _name: string,\n  _description: string,\n  _targetAmount: number,\n  _category: string,\n) => {\n  const data: ICampaigns = {\n    name: _name,\n    description: _description,\n    targetAmount: Number(_targetAmount),\n    currentAmount: 0,\n    fundingStatus: true,\n    refundStatus: false,\n    category: _category,\n  };\n  axios\n    .post(`${BASE_PATH}/create_campaign`, data)\n    .then(res => alert(\"정상적으로 제출되었습니다 :)\"))\n    .catch(e => console.log(e));\n};\n\n// funding 중인 캠페인만 출력\nexport const getFunding = async (setAllData: Function) => {\n  const results = await axios.get(`${BASE_PATH}/campaign/Onfunding`);\n  setAllData(results.data);\n};\n\n// refunding 중인 캠페인만 출력\nexport const getRefunding = async (setAllData: Function) => {\n  const results = await axios.get(`${BASE_PATH}/campaign/OnRefund`);\n  setAllData(results.data);\n};\n"]},"metadata":{},"sourceType":"module"}