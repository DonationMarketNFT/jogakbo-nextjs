{"ast":null,"code":"import Caver, { AbiItem } from \"caver-js\";\nimport { ACCESS_KEY_ID, CHAIN_ID, JOGAKBO_CONTRACT_ADDRESS, NFT_CONTRACT_ADDRESS, SECRET_ACCRESS_KEY } from \"../constants/constants.baobab\";\nimport JOGAKBOABI from \"../abi/JogakboABI.json\";\nimport NFTABI from \"../abi/NftABI.json\";\nconst option = {\n  headers: [{\n    name: \"Authorization\",\n    value: \"Basic \" + Buffer.from(ACCESS_KEY_ID + \":\" + SECRET_ACCRESS_KEY).toString(\"base64\")\n  }, {\n    name: \"x-chain-id\",\n    value: CHAIN_ID\n  }]\n};\nconst caver = new Caver(new Caver.providers.HttpProvider( // \"https://node-api.klaytnapi.com/v1/klaytn\",\n\"https://api.baobab.klaytn.net:8651/\", option));\nexport const rs = async () => {\n  await caver.klay.sendTransaction({\n    type: \"VALUE_TRANSFER\",\n    from: \"0xc72af0d3c40d5E95e3424b251ceA0cD81e230Dc1\",\n    to: \"0xA52c3f53F087B3445190ADc0B038Bd78D8110eDa\",\n    gas: \"300000\",\n    value: caver.utils.toPeb(\"1\", \"KLAY\")\n  });\n};\nexport const JogakboContract = new caver.contract(JOGAKBOABI, JOGAKBO_CONTRACT_ADDRESS); // 테스트 완료\n\nexport const getCampaignNumber = async () => {\n  const number = await JogakboContract.methods.CampaignNumber().call();\n  console.log(number);\n  return number;\n};\nexport const createCampaign = async (_campaign_address, _target_amount, _campaign_ID) => {\n  const options = {\n    from: _campaign_address\n  };\n  const create = await JogakboContract.methods.createCampaign(_campaign_address, _target_amount, _campaign_ID).sign(options).then(console.log);\n  return create;\n}; // export const campaignList = async () => {\n//   const number = await JogakboContract.methods.campaignNumber().call();\n//   const lists = [];\n//   for (let i = 0; i < number; i++) {\n//     const list = await JogakboContract.methods.campaignList([i]).call();\n//     lists.push(list);\n//   }\n//   return lists;\n// };\n// export const testOwnTokenId = async address => {\n//   const ids = await JogakboContract.methods.tokenIds(address).call();\n//   return ids;\n// };\n// export const testTokenId2Description = async id => {\n//   const des = await JogakboContract.methods.tokenDescription(id).call();\n//   return des;\n// };\n// export const testTokenId2Name = async id => {\n//   const des = await JogakboContract.methods.tokenName(id).call();\n//   return des;\n// };\n// export const testCampaignList = async () => {\n//   const Number = await JogakboContract.methods.CampaignNumber().call();\n//   const lists = [];\n//   for (let i = 0; i < Number; i++) {\n//     const list = await JogakboContract.methods.campaignList([i]).call();\n//     lists.push(list);\n//   }\n//   return lists;\n// };\n// export const testCampaignNumber = async () => {\n//   const Number = await JogakboContract.methods.CampaignNumber().call();\n//   console.log(`number:${Number}`);\n//   return Number;\n// };\n// klip 잔고 조회시 메인넷 chain_id 필요\n\nexport const getBalance = address => {\n  return caver.rpc.klay.getBalance(address).then(response => {\n    const balance = caver.utils.convertFromPeb(caver.utils.hexToNumberString(response), \"KLAY\");\n    return balance;\n  });\n};","map":{"version":3,"sources":["/Users/kimdawoon/jogakbo-nextjs/jogakbo-nextjs/src/api/UseCaver.js"],"names":["Caver","AbiItem","ACCESS_KEY_ID","CHAIN_ID","JOGAKBO_CONTRACT_ADDRESS","NFT_CONTRACT_ADDRESS","SECRET_ACCRESS_KEY","JOGAKBOABI","NFTABI","option","headers","name","value","Buffer","from","toString","caver","providers","HttpProvider","rs","klay","sendTransaction","type","to","gas","utils","toPeb","JogakboContract","contract","getCampaignNumber","number","methods","CampaignNumber","call","console","log","createCampaign","_campaign_address","_target_amount","_campaign_ID","options","create","sign","then","getBalance","address","rpc","response","balance","convertFromPeb","hexToNumberString"],"mappings":"AAAA,OAAOA,KAAP,IAAeC,OAAf,QAA6B,UAA7B;AACA,SACEC,aADF,EAEEC,QAFF,EAGEC,wBAHF,EAIEC,oBAJF,EAKEC,kBALF,QAMO,+BANP;AAOA,OAAOC,UAAP,MAAuB,wBAAvB;AACA,OAAOC,MAAP,MAAmB,oBAAnB;AAEA,MAAMC,MAAM,GAAG;AACbC,EAAAA,OAAO,EAAE,CACP;AACEC,IAAAA,IAAI,EAAE,eADR;AAEEC,IAAAA,KAAK,EACH,WACAC,MAAM,CAACC,IAAP,CAAYZ,aAAa,GAAG,GAAhB,GAAsBI,kBAAlC,EAAsDS,QAAtD,CACE,QADF;AAJJ,GADO,EASP;AACEJ,IAAAA,IAAI,EAAE,YADR;AAEEC,IAAAA,KAAK,EAAET;AAFT,GATO;AADI,CAAf;AAiBA,MAAMa,KAAK,GAAG,IAAIhB,KAAJ,CACZ,IAAIA,KAAK,CAACiB,SAAN,CAAgBC,YAApB,EACE;AACA,qCAFF,EAGET,MAHF,CADY,CAAd;AAQA,OAAO,MAAMU,EAAE,GAAG,YAAY;AAC5B,QAAMH,KAAK,CAACI,IAAN,CAAWC,eAAX,CAA2B;AAC/BC,IAAAA,IAAI,EAAE,gBADyB;AAE/BR,IAAAA,IAAI,EAAE,4CAFyB;AAG/BS,IAAAA,EAAE,EAAE,4CAH2B;AAI/BC,IAAAA,GAAG,EAAE,QAJ0B;AAK/BZ,IAAAA,KAAK,EAAEI,KAAK,CAACS,KAAN,CAAYC,KAAZ,CAAkB,GAAlB,EAAuB,MAAvB;AALwB,GAA3B,CAAN;AAOD,CARM;AAUP,OAAO,MAAMC,eAAe,GAAG,IAAIX,KAAK,CAACY,QAAV,CAC7BrB,UAD6B,EAE7BH,wBAF6B,CAAxB,C,CAKP;;AACA,OAAO,MAAMyB,iBAAiB,GAAG,YAAY;AAC3C,QAAMC,MAAM,GAAG,MAAMH,eAAe,CAACI,OAAhB,CAAwBC,cAAxB,GAAyCC,IAAzC,EAArB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYL,MAAZ;AACA,SAAOA,MAAP;AACD,CAJM;AAMP,OAAO,MAAMM,cAAc,GAAG,OAC5BC,iBAD4B,EAE5BC,cAF4B,EAG5BC,YAH4B,KAIzB;AACH,QAAMC,OAAO,GAAG;AACd1B,IAAAA,IAAI,EAAEuB;AADQ,GAAhB;AAGA,QAAMI,MAAM,GAAG,MAAMd,eAAe,CAACI,OAAhB,CAClBK,cADkB,CACHC,iBADG,EACgBC,cADhB,EACgCC,YADhC,EAElBG,IAFkB,CAEbF,OAFa,EAGlBG,IAHkB,CAGbT,OAAO,CAACC,GAHK,CAArB;AAIA,SAAOM,MAAP;AACD,CAbM,C,CAeP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;;AACA,OAAO,MAAMG,UAAU,GAAGC,OAAO,IAAI;AACnC,SAAO7B,KAAK,CAAC8B,GAAN,CAAU1B,IAAV,CAAewB,UAAf,CAA0BC,OAA1B,EAAmCF,IAAnC,CAAwCI,QAAQ,IAAI;AACzD,UAAMC,OAAO,GAAGhC,KAAK,CAACS,KAAN,CAAYwB,cAAZ,CACdjC,KAAK,CAACS,KAAN,CAAYyB,iBAAZ,CAA8BH,QAA9B,CADc,EAEd,MAFc,CAAhB;AAIA,WAAOC,OAAP;AACD,GANM,CAAP;AAOD,CARM","sourcesContent":["import Caver, {AbiItem} from \"caver-js\";\nimport {\n  ACCESS_KEY_ID,\n  CHAIN_ID,\n  JOGAKBO_CONTRACT_ADDRESS,\n  NFT_CONTRACT_ADDRESS,\n  SECRET_ACCRESS_KEY,\n} from \"../constants/constants.baobab\";\nimport JOGAKBOABI from \"../abi/JogakboABI.json\";\nimport NFTABI from \"../abi/NftABI.json\";\n\nconst option = {\n  headers: [\n    {\n      name: \"Authorization\",\n      value:\n        \"Basic \" +\n        Buffer.from(ACCESS_KEY_ID + \":\" + SECRET_ACCRESS_KEY).toString(\n          \"base64\",\n        ),\n    },\n    {\n      name: \"x-chain-id\",\n      value: CHAIN_ID,\n    },\n  ],\n};\n\nconst caver = new Caver(\n  new Caver.providers.HttpProvider(\n    // \"https://node-api.klaytnapi.com/v1/klaytn\",\n    \"https://api.baobab.klaytn.net:8651/\",\n    option,\n  ),\n);\n\nexport const rs = async () => {\n  await caver.klay.sendTransaction({\n    type: \"VALUE_TRANSFER\",\n    from: \"0xc72af0d3c40d5E95e3424b251ceA0cD81e230Dc1\",\n    to: \"0xA52c3f53F087B3445190ADc0B038Bd78D8110eDa\",\n    gas: \"300000\",\n    value: caver.utils.toPeb(\"1\", \"KLAY\"),\n  });\n};\n\nexport const JogakboContract = new caver.contract(\n  JOGAKBOABI,\n  JOGAKBO_CONTRACT_ADDRESS,\n);\n\n// 테스트 완료\nexport const getCampaignNumber = async () => {\n  const number = await JogakboContract.methods.CampaignNumber().call();\n  console.log(number);\n  return number;\n};\n\nexport const createCampaign = async (\n  _campaign_address,\n  _target_amount,\n  _campaign_ID,\n) => {\n  const options = {\n    from: _campaign_address,\n  };\n  const create = await JogakboContract.methods\n    .createCampaign(_campaign_address, _target_amount, _campaign_ID)\n    .sign(options)\n    .then(console.log);\n  return create;\n};\n\n// export const campaignList = async () => {\n//   const number = await JogakboContract.methods.campaignNumber().call();\n//   const lists = [];\n//   for (let i = 0; i < number; i++) {\n//     const list = await JogakboContract.methods.campaignList([i]).call();\n//     lists.push(list);\n//   }\n//   return lists;\n// };\n\n// export const testOwnTokenId = async address => {\n//   const ids = await JogakboContract.methods.tokenIds(address).call();\n//   return ids;\n// };\n\n// export const testTokenId2Description = async id => {\n//   const des = await JogakboContract.methods.tokenDescription(id).call();\n//   return des;\n// };\n\n// export const testTokenId2Name = async id => {\n//   const des = await JogakboContract.methods.tokenName(id).call();\n//   return des;\n// };\n\n// export const testCampaignList = async () => {\n//   const Number = await JogakboContract.methods.CampaignNumber().call();\n\n//   const lists = [];\n//   for (let i = 0; i < Number; i++) {\n//     const list = await JogakboContract.methods.campaignList([i]).call();\n//     lists.push(list);\n//   }\n//   return lists;\n// };\n\n// export const testCampaignNumber = async () => {\n//   const Number = await JogakboContract.methods.CampaignNumber().call();\n//   console.log(`number:${Number}`);\n//   return Number;\n// };\n\n// klip 잔고 조회시 메인넷 chain_id 필요\nexport const getBalance = address => {\n  return caver.rpc.klay.getBalance(address).then(response => {\n    const balance = caver.utils.convertFromPeb(\n      caver.utils.hexToNumberString(response),\n      \"KLAY\",\n    );\n    return balance;\n  });\n};\n"]},"metadata":{},"sourceType":"module"}