{"ast":null,"code":"import _regeneratorRuntime from \"/Users/kimdawoon/jogakbo-nextjs/jogakbo-nextjs/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/kimdawoon/jogakbo-nextjs/jogakbo-nextjs/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport axios from \"axios\";\nvar BASE_PATH = \"http://ec2-52-78-57-218.ap-northeast-2.compute.amazonaws.com:3000/pre-campaigns\";\n// 모든 데이터 조회\nexport var getPreCampaigns = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(setPosts) {\n    var results;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return axios.get(\"\".concat(BASE_PATH, \"/campaign_all\"));\n\n          case 2:\n            results = _context.sent;\n            setPosts(results.data);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function getPreCampaigns(_x) {\n    return _ref.apply(this, arguments);\n  };\n}(); // export const getPreCampaigns = () => {\n//   fetchWrap({method: \"get\", url: `pre-campaigns/campaign_all`});\n// };\n// 캠페인 생성하기를 통한 데이터 추가\n\nexport var postPreCampaign = function postPreCampaign(_name, _description, _targetAmount, _category, _creatorAddress, _minFundingAmount) {\n  var data = {\n    name: _name,\n    description: _description,\n    targetAmount: Number(_targetAmount),\n    currentAmount: 0,\n    fundingStatus: true,\n    refundStatus: false,\n    category: _category,\n    creatorAddress: _creatorAddress,\n    minFundingAmount: Number(_minFundingAmount)\n  };\n  axios.post(\"\".concat(BASE_PATH, \"/create_campaign\"), data).then(function (res) {\n    return alert(\"정상적으로 제출되었습니다 :)\");\n  })[\"catch\"](function (e) {\n    return console.log(e);\n  });\n}; // export const postPreCampaign = ({\n//   name,\n//   description,\n//   targetAmount,\n//   category,\n//   creatorAddress,\n// }: {\n//   name: string;\n//   description: string;\n//   targetAmount: number;\n//   category: \"공익\" | \"사회\" | \"환경\";\n//   creatorAddress: string;\n// }) =>\n//   fetchWrap({\n//     method: \"post\",\n//     url: \"/pre-campaigns/create_campaign\",\n//     body: {name, description, targetAmount, category, creatorAddress},\n//   });","map":{"version":3,"sources":["/Users/kimdawoon/jogakbo-nextjs/jogakbo-nextjs/src/api/preCampaigns.ts"],"names":["axios","BASE_PATH","getPreCampaigns","setPosts","get","results","data","postPreCampaign","_name","_description","_targetAmount","_category","_creatorAddress","_minFundingAmount","name","description","targetAmount","Number","currentAmount","fundingStatus","refundStatus","category","creatorAddress","minFundingAmount","post","then","res","alert","e","console","log"],"mappings":";;AACA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,IAAMC,SAAS,GACb,iFADF;AAeA;AACA,OAAO,IAAMC,eAAe;AAAA,sEAAG,iBAAOC,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACPH,KAAK,CAACI,GAAN,WAAaH,SAAb,mBADO;;AAAA;AACvBI,YAAAA,OADuB;AAE7BF,YAAAA,QAAQ,CAACE,OAAO,CAACC,IAAT,CAAR;;AAF6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAfJ,eAAe;AAAA;AAAA;AAAA,GAArB,C,CAKP;AACA;AACA;AAEA;;AACA,OAAO,IAAMK,eAAe,GAAG,SAAlBA,eAAkB,CAC7BC,KAD6B,EAE7BC,YAF6B,EAG7BC,aAH6B,EAI7BC,SAJ6B,EAK7BC,eAL6B,EAM7BC,iBAN6B,EAO1B;AACH,MAAMP,IAAmB,GAAG;AAC1BQ,IAAAA,IAAI,EAAEN,KADoB;AAE1BO,IAAAA,WAAW,EAAEN,YAFa;AAG1BO,IAAAA,YAAY,EAAEC,MAAM,CAACP,aAAD,CAHM;AAI1BQ,IAAAA,aAAa,EAAE,CAJW;AAK1BC,IAAAA,aAAa,EAAE,IALW;AAM1BC,IAAAA,YAAY,EAAE,KANY;AAO1BC,IAAAA,QAAQ,EAAEV,SAPgB;AAQ1BW,IAAAA,cAAc,EAAEV,eARU;AAS1BW,IAAAA,gBAAgB,EAAEN,MAAM,CAACJ,iBAAD;AATE,GAA5B;AAWAb,EAAAA,KAAK,CACFwB,IADH,WACWvB,SADX,uBACwCK,IADxC,EAEGmB,IAFH,CAEQ,UAAAC,GAAG;AAAA,WAAIC,KAAK,CAAC,kBAAD,CAAT;AAAA,GAFX,WAGS,UAAAC,CAAC;AAAA,WAAIC,OAAO,CAACC,GAAR,CAAYF,CAAZ,CAAJ;AAAA,GAHV;AAID,CAvBM,C,CAyBP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import {fetchWrap} from \"../components/utils/axios\";\nimport axios from \"axios\";\n\nconst BASE_PATH =\n  \"http://ec2-52-78-57-218.ap-northeast-2.compute.amazonaws.com:3000/pre-campaigns\";\n\ninterface IPreCampaigns {\n  name: string;\n  description: string;\n  targetAmount: number;\n  currentAmount: number;\n  fundingStatus: boolean;\n  refundStatus: boolean;\n  category: string;\n  creatorAddress: string;\n  minFundingAmount: number;\n}\n\n// 모든 데이터 조회\nexport const getPreCampaigns = async (setPosts: Function) => {\n  const results = await axios.get(`${BASE_PATH}/campaign_all`);\n  setPosts(results.data);\n};\n\n// export const getPreCampaigns = () => {\n//   fetchWrap({method: \"get\", url: `pre-campaigns/campaign_all`});\n// };\n\n// 캠페인 생성하기를 통한 데이터 추가\nexport const postPreCampaign = (\n  _name: string,\n  _description: string,\n  _targetAmount: number,\n  _category: string,\n  _creatorAddress: string,\n  _minFundingAmount: number,\n) => {\n  const data: IPreCampaigns = {\n    name: _name,\n    description: _description,\n    targetAmount: Number(_targetAmount),\n    currentAmount: 0,\n    fundingStatus: true,\n    refundStatus: false,\n    category: _category,\n    creatorAddress: _creatorAddress,\n    minFundingAmount: Number(_minFundingAmount),\n  };\n  axios\n    .post(`${BASE_PATH}/create_campaign`, data)\n    .then(res => alert(\"정상적으로 제출되었습니다 :)\"))\n    .catch(e => console.log(e));\n};\n\n// export const postPreCampaign = ({\n//   name,\n//   description,\n//   targetAmount,\n//   category,\n//   creatorAddress,\n// }: {\n//   name: string;\n//   description: string;\n//   targetAmount: number;\n//   category: \"공익\" | \"사회\" | \"환경\";\n//   creatorAddress: string;\n// }) =>\n//   fetchWrap({\n//     method: \"post\",\n//     url: \"/pre-campaigns/create_campaign\",\n//     body: {name, description, targetAmount, category, creatorAddress},\n//   });\n"]},"metadata":{},"sourceType":"module"}