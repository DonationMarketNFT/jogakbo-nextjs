{"ast":null,"code":"import _regeneratorRuntime from \"/Users/kimdawoon/jogakbo-nextjs/jogakbo-nextjs/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/kimdawoon/jogakbo-nextjs/jogakbo-nextjs/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n// 1시간 후에는 tokenId가 만료되므로 데이터에 액세스하거나 사용자를 인증하는 데 사용할 수 없음\n// 새로운 tokenId를 생성해야함\nexport var refreshTokenSetup = function refreshTokenSetup(res) {\n  var refreshTiming = (res.tokenObj.expires_in || 3600 - 5 * 60) * 1000; //res.tokenObj.expires_in = 3600\n\n  var refreshToken = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var newAuthRes;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return res.reloadAuthResponese();\n\n            case 2:\n              newAuthRes = _context.sent;\n              refreshTiming = (newAuthRes.expires_in || 3600 - 5 * 60) * 1000;\n              console.log(\"newAuthRes:\", newAuthRes);\n              console.log(\"new auth Token\", newAuthRes.id_token); // Setup the other timer after the first one\n\n              setTimeout(refreshToken, refreshTiming);\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function refreshToken() {\n      return _ref.apply(this, arguments);\n    };\n  }(); // Setup first refresh timer\n\n\n  setTimeout(refreshToken, refreshTiming);\n};","map":{"version":3,"sources":["/Users/kimdawoon/jogakbo-nextjs/jogakbo-nextjs/src/components/utils/refreshTokenSetup.js"],"names":["refreshTokenSetup","res","refreshTiming","tokenObj","expires_in","refreshToken","reloadAuthResponese","newAuthRes","console","log","id_token","setTimeout"],"mappings":";;AAAA;AACA;AAEA,OAAO,IAAMA,iBAAiB,GAAG,SAApBA,iBAAoB,CAAAC,GAAG,EAAI;AACtC,MAAIC,aAAa,GAAG,CAACD,GAAG,CAACE,QAAJ,CAAaC,UAAb,IAA2B,OAAO,IAAI,EAAvC,IAA6C,IAAjE,CADsC,CAEtC;;AAEA,MAAMC,YAAY;AAAA,wEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACMJ,GAAG,CAACK,mBAAJ,EADN;;AAAA;AACbC,cAAAA,UADa;AAEnBL,cAAAA,aAAa,GAAG,CAACK,UAAU,CAACH,UAAX,IAAyB,OAAO,IAAI,EAArC,IAA2C,IAA3D;AACAI,cAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BF,UAA3B;AACAC,cAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BF,UAAU,CAACG,QAAzC,EAJmB,CAMnB;;AACAC,cAAAA,UAAU,CAACN,YAAD,EAAeH,aAAf,CAAV;;AAPmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAZG,YAAY;AAAA;AAAA;AAAA,KAAlB,CAJsC,CAatC;;;AACAM,EAAAA,UAAU,CAACN,YAAD,EAAeH,aAAf,CAAV;AACD,CAfM","sourcesContent":["// 1시간 후에는 tokenId가 만료되므로 데이터에 액세스하거나 사용자를 인증하는 데 사용할 수 없음\n// 새로운 tokenId를 생성해야함\n\nexport const refreshTokenSetup = res => {\n  let refreshTiming = (res.tokenObj.expires_in || 3600 - 5 * 60) * 1000;\n  //res.tokenObj.expires_in = 3600\n\n  const refreshToken = async () => {\n    const newAuthRes = await res.reloadAuthResponese();\n    refreshTiming = (newAuthRes.expires_in || 3600 - 5 * 60) * 1000;\n    console.log(\"newAuthRes:\", newAuthRes);\n    console.log(\"new auth Token\", newAuthRes.id_token);\n\n    // Setup the other timer after the first one\n    setTimeout(refreshToken, refreshTiming);\n  };\n  // Setup first refresh timer\n  setTimeout(refreshToken, refreshTiming);\n};\n"]},"metadata":{},"sourceType":"module"}